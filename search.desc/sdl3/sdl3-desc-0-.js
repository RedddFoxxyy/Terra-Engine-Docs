searchState.loadedDescShard("sdl3", 0, "Getting started\nA thread-safe type that encapsulates SDL event-pumping …\nA given integer was so big that its representation as a C …\nThe SDL context type. Initialize with <code>sdl3::init()</code>.\nCreate an event watcher which is called every time an …\nAdd a new controller input mapping from a mapping string.\nAudio Functions\nInitializes the audio subsystem.\nEnumerate audio playback devices.\nEnumerate audio recording devices.\nEvent Handling\nInitializes the event subsystem.\nObtains the SDL event pump.\nCreate an event sender that can be sent to other threads.\nReturn <code>true</code> if joystick events are processed.\nRemoves all events in the event queue that match the …\nRemoves all events in the event queue that match the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the gamepad subsystem.\nGet platform name\nGet primary display ID.\nGet the current system theme.\nObtains access to the OpenGL window attributes.\nGets the pointer to the named OpenGL function.\nLoads the OpenGL library using a platform-dependent OpenGL …\nLoads the default OpenGL library.\nReleases the thread’s current OpenGL context, i.e. sets …\nUnloads the current OpenGL library.\nHaptic Functions\nInitializes the haptic subsystem.\nA binding for the library <code>sdl3_image</code>\nInitializes the SDL library. This must be called before …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn true if the joystick at index <code>joystick_index</code> is a …\nInitializes the joystick subsystem.\nGet joystick instance IDs and names.\nLoad controller input mappings from a file.\nLoad controller input mappings from a <code>Read</code> object.\nLoad controller input mappings from an SDL <code>IOStream</code> object.\nReturn the name of the controller at index <code>joystick_index</code>.\nRetrieve the total number of attached gamepads identified …\nAttempt to open the joystick at index <code>joystick_index</code> and …\nAttempt to open the controller at index <code>joystick_index</code> and …\nAttempt to open the joystick at index <code>joystick_index</code> and …\nOpen a default playback device with the specified audio …\nOpen a default recording device with the specified audio …\nReads the events at the front of the event queue, until …\nPolls for currently pending events.\nReturns a polling iterator that calls <code>poll_event()</code>. The …\nInitializes a new <code>PopupWindowBuilder</code>; a convenience method …\nPumps the event loop, gathering events from the input …\nPush a custom event\nPushes an event to the event queue.\nRectangles and points.\nRegister a custom event\nRegister a custom SDL event.\nRegisters custom SDL events.\n2D accelerated rendering\nObtain an SDL context.\nObtain an SDL context.\nObtain an SDL context.\nObtain an SDL context.\nObtain an SDL context.\nObtain an SDL context.\nObtain an SDL context.\nObtain an SDL context.\nInitializes the game controller subsystem.\nIf state is <code>true</code> joystick events are processed, otherwise …\nForce joystick update when not using the event loop\nForce controller update when not using the event loop\nOpening URLs in default system handlers\nQuerying SDL Version\nInitializes the video subsystem.\nGets the pointer to the <code>vkGetInstanceProcAddr</code> Vulkan …\nLoads the Vulkan library using a platform-dependent Vulkan …\nLoads the default Vulkan library.\nUnloads the current Vulkan library.\nWaits indefinitely for the next available event.\nWaits until the specified timeout (in milliseconds) for …\nReturns a waiting iterator that calls <code>wait_event()</code>.\nReturns a waiting iterator that calls <code>wait_event_timeout()</code>.\nInitializes a new <code>WindowBuilder</code>; a convenience method that …\nCreate a window with a renderer.\nRepresents an open audio device (playback or recording).\nA phantom type for retrieving the <code>SDL_AudioFormat</code> of a …\n32-bit floating point samples, big-endian\n32-bit floating point samples, little-endian\nSigned 16-bit samples, big-endian\nSigned 16-bit samples, little-endian\nSigned 32-bit samples, big-endian\nSigned 32-bit samples, little-endian\nSigned 8-bit samples\nThe appropriately typed silence value for the audio format …\nUnsigned 8-bit samples\nGets the number of converted/resampled bytes available.\nBinds an audio stream to this device.\nBinds multiple audio streams to this device.\nNumber of separate audio channels. Set to None for the …\nCreates an <code>AudioSpec</code> with all fields set to <code>None</code> (use …\nGet the device ID bound to the stream. If the stream is …\nGets an iterator of all audio drivers compiled into the …\nDestroys the audio stream, unbinding it automatically from …\n32-bit floating point samples, native endian\nAudio format. Set to None for the device’s fallback …\nDSP frequency (samples per second). Set to None for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the source and destination formats of the audio …\nRetrieves the gain of the audio stream.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a WAVE from the file path.\nLoads a WAVE from the data source.\nGet the name of the audio device.\nCreates a new audio stream that converts audio data from …\nCreates a new <code>AudioSpec</code> with specified values. Use <code>None</code> …\nCreates a new audio stream for playback.\nCreates a new audio stream for recording.\nCreate an <code>AudioStream</code> for this device with the specified …\nOpens a new audio device for playback (given the desired …\nOpens a new audio stream for this device with the …\nOpens a new audio device for recording (given the desired …\nOpens a new audio stream for recording with the specified …\nPauses playback of the audio stream.\nPauses the audio stream.\nPauses playback of the audio device.\nAdds data to the stream.\nReads audio data from the stream. Note that this reads …\nReads samples as f32 into the provided buffer. Returns the …\nReads samples as i16 into the provided buffer. Returns the …\nResumes playback of the audio stream.\nResumes the audio stream.\nStarts playback of the audio device.\nSigned 16-bit samples, native endian\nSigned 32-bit samples, native endian\nGet the SDL_AudioStream pointer.\nClipboard utility functions. Access with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn enum of display events.\nDifferent event types.\nAn iterator that calls <code>EventPump::poll_event()</code>.\nA sendible type that can push events to the event queue.\nTypes of events that can be delivered.\nAn iterator that calls <code>EventPump::wait_event()</code>.\nAn iterator that calls <code>EventPump::wait_event_timeout()</code>.\nAn handler for the event watch callback. One must bind …\nA callback trait for [<code>EventSubsystem::add_event_watch</code>].\nAn enum of window events.\nActivates the event watch. Does nothing if it is already …\nReturns if the event watch is activated.\nDeactivates the event watch. Does nothing if it is already …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the <code>timestamp</code> field of the event.\nReturns the <code>window_id</code> field of the event if it’s present …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if this is an audio event.\nReturns <code>true</code> if this is a controller event.\nReturns <code>true</code> if this is a drop event.\nReturns <code>true</code> if this is a finger event.\nReturns <code>true</code> if this is a joy event.\nReturns <code>true</code> if this is a keyboard event.\nReturns <code>true</code> if this is a mouse event.\nReturns <code>true</code> if this is a render event.\nReturns <code>true</code> if they are the same “kind” of events.\nReturns <code>true</code> if this is a text event.\nReturns <code>true</code> if this is an unknown event.\nReturns <code>true</code> if this is a user event.\nReturns <code>true</code> if this is a window event.\nPush a custom event\nPushes an event to the event queue.\nSet the activation state of the event watch.\nThe index of the finger on the touchpad\nThe index of the finger on the touchpad\nThe index of the finger on the touchpad\nNormalized in the range 0…1\nNormalized in the range 0…1\nNormalized in the range 0…1\nThe index of the touchpad\nThe index of the touchpad\nThe index of the touchpad\nThe joystick’s <code>id</code>\nThe joystick’s <code>id</code>\nThe joystick’s <code>id</code>\nThe joystick’s <code>id</code>\nThe newly added joystick’s <code>joystick_index</code>\nThe joystick’s <code>id</code>\nThe controller’s joystick <code>id</code>\nThe controller’s joystick <code>id</code>\nThe controller’s joystick <code>id</code>\nThe newly added controller’s <code>joystick_index</code>\nThe controller’s joystick <code>id</code>\nThe controller’s joystick <code>id</code>\nThe joystick instance id\nThe joystick instance id\nThe joystick instance id\nNormalized in the range 0…1 with 0 being on the left\nNormalized in the range 0…1 with 0 being on the left\nNormalized in the range 0…1 with 0 being on the left\nNormalized in the range 0…1 with 0 being at the top\nNormalized in the range 0…1 with 0 being at the top\nNormalized in the range 0…1 with 0 being at the top\nValue that requests that enumeration continue.\nTotal number of types in this enum, not a folder type by …\nThe folder of files that are displayed on the desktop. …\na directory\nUser document files, possibly application-specific. This …\nStandard folder for user files downloaded from the …\nPossible results from an enumeration callback.\nValue that requests that enumeration stop, as a failure.\na normal file\nThe type of the OS-provided default folder for a specific …\nThe folder which contains all of the current user’s …\nMusic files that can be played using a standard music …\npath does not exist\nsomething completely different like a device node (not a …\nImage files that can be displayed using a standard viewer …\nFiles that are meant to be shared with other users on the …\nTypes of filesystem entries.\nSave files for games.\nApplication screenshots.\nValue that requests that enumeration stop, successfully.\nTemplate files to be used when the user requests the …\nVideo files that can be played using a standard video …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nReturn the preferred directory for the application to …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nWrapper around the <code>SDL_Gamepad</code> object\nPossible return values for <code>add_mapping</code>\nReturn true if the controller has been opened and currently\nGet the position of the given <code>axis</code>\nReturns <code>true</code> if <code>button</code> is pressed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the Axis from a string description in the same …\nReturn the Button from a string description in the same …\nQuery whether a game controller has a RGB LED.\nQuery whether a game controller has rumble support.\nQuery whether a game controller has rumble support on …\nReturn the joystick instance id of this controller\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a String describing the controller’s button and …\nReturn the name of the controller or an empty string if no …\nSend a controller specific effect packet.\nUpdate a game controller’s LED color.\nSet the rumble motors to their specified intensities, if …\nStart a rumble effect in the game controller’s triggers.\nReturn a string for a given axis in the same format using …\nReturn a string for a given button in the same format …\nMapped memory for a transfer buffer.\nThe comparison operator used in the stencil test.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe length of this buffer in bytes.\nThe length of this buffer in bytes.\nAccess the memory as a readonly slice.\nAccess the memory as a mutable slice.\nYields the raw SDL_GPUBuffer pointer.\nThe addressing mode for U coordinates outside [0, 1).\nThe addressing mode for V coordinates outside [0, 1).\nThe addressing mode for W coordinates outside [0, 1).\nThe blend operation for the alpha component.\nThe stencil op state for back-facing triangles.\nThe blend state to be used for the color target.\nThe binding slot of the associated vertex buffer.\nThe blend operation for the RGB components.\nA pointer to an array of color target descriptions.\nA bitmask specifying which of the RGBA components are …\nSelects the bits of the stencil values participating in …\nThe comparison operator used for depth testing.\nThe comparison operator to apply to fetched data before …\nThe facing direction in which triangles will be culled.\nThe depth of the region.\nThe maximum depth bias of a fragment.\nA scalar factor controlling the depth value added to each …\nThe action performed on samples that pass the stencil test …\nA scalar factor applied to a fragment’s slope in depth …\nThe pixel format of the depth-stencil target. Ignored if …\nThe value to be multiplied by the destination alpha.\nThe value to be multiplied by the destination RGB value.\nTrue to enable anisotropic filtering.\nWhether blending is enabled for the color target.\nWhether the color write mask is enabled.\nTrue to enable comparison against a reference value during …\nTrue to bias fragment depth values.\nTrue to enable depth clip, false to enable depth clamp.\nTrue enables the depth test.\nTrue enables depth writes.\nTrue enables the stencil test.\nThe action performed on samples that fail the stencil test.\nWhether polygons will be filled in or drawn as lines.\nWhether polygons will be filled in or drawn as lines.\nThe size and type of the attribute data.\nThe pixel format of the texture to be used as a color …\nThe pixel format of the texture.\nThe vertex winding that will cause a triangle to be …\nThe stencil op state for front-facing triangles.\ntrue specifies that the pipeline uses a depth-stencil …\nThe height of the region.\nThe height of the texture.\nThe layer index to transfer.\nThe layer count or depth of the texture. This value is …\nThe shader input location index.\nThe magnification filter to apply to lookups.\nThe anisotropy value clamp used by the sampler. If …\nClamps the maximum of the computed LOD value.\nThe minification filter to apply to lookups.\nClamps the minimum of the computed LOD value.\nThe mip level index to transfer.\nThe bias to be added to mipmap LOD calculation.\nThe mipmap filter to apply to lookups.\nThe number of mip levels in the texture.\nThe byte offset of this attribute relative to the start of …\nThe starting byte of the image data in the transfer buffer.\nThe action performed on samples that pass the depth and …\nThe number of pixels from one row to the next.\nSets the parameters of the graphics pipeline rasterizer …\nThe number of rows from one layer/depth-slice to the next.\nThe number of samples per texel. Only applies if the …\nThe sampler to bind.\nDesired size of the buffer in bytes.\nThe value to be multiplied by the source alpha.\nThe value to be multiplied by the source RGB value.\nThe texture used in the copy operation.\nThe texture to bind. Must have been created with […\nThe transfer buffer used in the transfer operation.\nThe base dimensionality of the texture.\nHow the buffer will be used.\nHow the texture is intended to be used by the client.\nThe width of the region.\nThe width of the texture.\nSelects the bits of the stencil values updated by the …\nThe left offset of the region.\nThe top offset of the region.\nThe front offset of the region.\nWrapper around the <code>SDL_Haptic</code> object\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun a simple rumble effect on the haptic device.\nStop the simple rumble on the haptic device.\nReturns the argument unchanged.\nA hint that specifies whether a fullscreen Window will be …\nCalls <code>U::from(self)</code>.\nContains all predefined names in the sdl3 documentation.\nA hint that specifies whether a fullscreen Window will be …\nA hint that specifies whether a fullscreen Window will be …\nSpecify the behavior of Alt+Tab while the keyboard is …\nA variable to control whether the SDL activity is allowed …\nA variable to control whether the event loop will block …\nA variable to control whether low latency audio should be …\nA variable to control whether we trap the Android back …\nA variable controlling whether controllers used with the …\nA variable controlling whether the Apple TV remote’s …\nA variable setting the app ID string.\nA variable setting the application name.\nA variable controlling response to [<code>SDL_assert</code>] failures.\nSpecify the default ALSA audio device name.\nSpecify the default ALSA audio playback device name.\nSpecify the default ALSA audio recording device name.\nA variable controlling the audio category on iOS and macOS.\nA variable controlling the default audio channel count.\nSpecify an application icon name for an audio device.\nA variable controlling device buffer size.\nSpecify an audio stream name for an audio device.\nSpecify an application role for an audio device.\nSpecify the input file when recording audio using the disk …\nSpecify the output file when playing audio using the disk …\nA variable controlling the audio rate when using the disk …\nA variable that specifies an audio backend to use.\nA variable controlling the audio rate when using the dummy …\nA variable controlling the default audio format.\nA variable controlling the default audio frequency.\nA variable that causes SDL to not ignore audio “monitors…\nA variable controlling whether SDL updates joystick state …\nA variable controlling whether SDL updates sensor state …\nPrevent SDL from using version 4 of the bitmap header when …\nA variable that decides what camera backend to use.\nA variable that limits what CPU features are available.\nOverride for [<code>SDL_GetDisplayUsableBounds()</code>].\nSpecify the EGL library to load.\nDisable giving back control to the browser automatically …\nSpecify the CSS selector used for the “default” …\nOverride the binding element for keyboard inputs for …\nA variable that controls whether the on-screen keyboard …\nA variable containing a list of evdev devices to use if …\nA variable controlling verbosity of the logging of SDL …\nA variable that specifies a dialog backend to use.\nA variable controlling whether raising the window should …\nA variable controlling how 3D acceleration is used to …\nA variable that lets you manually hint extra …\nA variable that lets you provide a file with extra …\nA variable that overrides the automatic controller type …\nA variable containing a list of devices to skip when …\nIf set, all devices will be skipped when scanning for game …\nA variable that controls whether the device’s built-in …\nThis variable sets the default text of the TextInput …\nThis variable sets the description of the TextInput window …\nThis variable sets the maximum input length of the …\nThis variable sets the input scope of the TextInput window …\nThis variable sets the title of the TextInput window on …\nA variable that specifies a GPU backend to use.\nA variable to control whether [<code>SDL_hid_enumerate()</code>] …\nA variable containing a list of devices to ignore in […\nA variable to control whether HIDAPI uses libusb for …\nA variable to control whether HIDAPI uses libusb only for …\nA variable to control whether HIDAPI uses udev for device …\nA variable describing what IME UI elements the application …\nA variable controlling whether the home indicator bar on …\nA variable that lets you enable joystick (and …\nA variable containing a list of arcade stick style …\nA variable containing a list of devices that are not …\nA variable containing a list of devices that should not be …\nA variable containing a list of devices that should be …\nA variable containing a comma separated list of devices to …\nA variable controlling whether DirectInput should be used …\nA variable controlling whether enhanced reports should be …\nA variable containing a list of flightstick style …\nA variable containing a list of devices that are not …\nA variable containing a list of devices known to have a …\nA variable containing a list of devices known not to have …\nA variable controlling whether GameInput should be used …\nA variable controlling whether the HIDAPI joystick drivers …\nA variable controlling whether Nintendo Switch Joy-Con …\nA variable controlling whether the HIDAPI driver for …\nA variable controlling whether rumble is used to implement …\nA variable controlling whether the Home button LED should …\nA variable controlling whether the HIDAPI driver for …\nA variable controlling whether the HIDAPI driver for …\nA variable controlling whether the HIDAPI driver for …\nA variable controlling whether the HIDAPI driver for PS3 …\nA variable controlling whether the Sony driver …\nA variable controlling whether the HIDAPI driver for PS4 …\nA variable controlling the update rate of the PS4 …\nA variable controlling whether the HIDAPI driver for PS5 …\nA variable controlling whether the player LEDs should be …\nA variable controlling whether the HIDAPI driver for …\nA variable controlling whether the HIDAPI driver for …\nA variable controlling whether the HIDAPI driver for …\nA variable controlling whether the HIDAPI driver for the …\nA variable controlling whether the Steam button LED should …\nA variable controlling whether the HIDAPI driver for HORI …\nA variable controlling whether the HIDAPI driver for …\nA variable controlling whether the Home button LED should …\nA variable controlling whether the player LEDs should be …\nA variable controlling whether Nintendo Switch Joy-Con …\nA variable controlling whether the HIDAPI driver for …\nA variable controlling whether the player LEDs should be …\nA variable controlling whether the HIDAPI driver for XBox …\nA variable controlling whether the HIDAPI driver for XBox …\nA variable controlling whether the player LEDs should be …\nA variable controlling whether the HIDAPI driver for XBox …\nA variable controlling whether the HIDAPI driver for XBox …\nA variable controlling whether the Home button LED should …\nA variable controlling whether IOKit should be used for …\nA variable controlling whether to use the classic …\nA variable controlling whether joysticks on Linux adhere …\nA variable controlling whether joysticks on Linux will …\nA variable controlling whether digital hats on Linux will …\nA variable controlling whether GCController should be used …\nA variable controlling whether the RAWINPUT joystick …\nA variable controlling whether the RAWINPUT driver should …\nA variable controlling whether the ROG Chakram mice should …\nA variable controlling whether a separate thread should be …\nA variable containing a list of throttle style controllers.\nA variable containing a list of devices that are not …\nA variable controlling whether Windows.Gaming.Input should …\nA variable containing a list of wheel style controllers.\nA variable containing a list of devices that are not wheel …\nA variable containing a list of devices known to have all …\nA variable that controls keycode representation in …\nA variable that controls what KMSDRM device to use.\nA variable that controls whether SDL requires DRM master …\nA variable controlling the default SDL log levels.\nA variable controlling whether to force the application to …\nA variable that determines whether Ctrl+Click should …\nA variable controlling whether dispatching OpenGL context …\nA variable controlling whether the Option key on macOS …\nA variable controlling whether [<code>SDL_EVENT_MOUSE_WHEEL</code>] …\nRequest [<code>SDL_AppIterate()</code>] be called at a specific rate.\nA variable controlling whether the mouse is captured while …\nA variable setting which system cursor to use as the …\nA variable setting the double click radius, in pixels.\nA variable setting the double click time, in milliseconds.\nA variable controlling whether warping a hidden mouse …\nAllow mouse click events when clicking to focus an SDL …\nA variable setting the speed scale for mouse motion, in …\nA variable controlling whether the hardware cursor stays …\nA variable controlling whether relative mouse mode …\nA variable setting the scale for mouse motion, in floating …\nA variable controlling whether the system mouse …\nA variable controlling whether a motion event should be …\nA variable controlling whether mouse events should …\nA variable controlling whether the keyboard should be …\nTell SDL not to catch the SIGINT or SIGTERM signals on …\nA variable controlling what driver to use for OpenGL ES …\nSpecify the OpenGL library to load.\nMechanism to specify openvr_api library location\nA variable controlling which orientations are allowed on …\nA variable controlling whether pen events should generate …\nA variable controlling whether pen events should generate …\nA variable controlling the use of a sentinel event when …\nOverride for [<code>SDL_GetPreferredLocales()</code>].\nA variable that decides whether to send [<code>SDL_EVENT_QUIT</code>] …\nA variable controlling whether to enable Direct3D 11+’s …\nA variable controlling whether the Direct3D device is …\nA variable specifying which render driver to use.\nA variable controlling whether to create the GPU device in …\nA variable controlling whether to prefer a low-power GPU …\nA variable controlling how the 2D render API renders lines.\nA variable controlling whether the Metal render driver …\nA variable controlling whether updates to the SDL screen …\nA variable controlling whether to enable Vulkan Validation …\nA variable to control whether the return key on the soft …\nA variable containing a list of ROG gamepad capable mice.\nA variable containing a list of devices that are not ROG …\nA variable controlling which Dispmanx layer to use on a …\nSpecify an “activity name” for screensaver inhibition.\nA variable controlling whether SDL calls dbus_shutdown() …\nA variable that specifies a backend to use for title …\nA variable that specifies a backend to use for user …\nSpecifies whether [<code>SDL_THREAD_PRIORITY_TIME_CRITICAL</code>] …\nA string specifying additional information to use with […\nA variable that controls the timer resolution, in …\nA variable controlling whether touch events should …\nA variable controlling whether trackpads should be treated …\nA variable controlling whether the Android / tvOS remotes …\nA variable controlling whether the screensaver is enabled.\nA comma separated list containing the names of the …\nTell the video driver that we only want a double buffer.\nA variable that specifies a video backend to use.\nA variable controlling whether the dummy video driver …\nIf eglGetPlatformDisplay fails, fall back to calling …\nA variable controlling whether the OpenGL context should …\nA variable that specifies the menu visibility when a …\nA variable that specifies the policy for fullscreen Spaces …\nA variable controlling whether fullscreen windows are …\nA variable controlling whether the offscreen video driver …\nA variable controlling whether all window operations will …\nA variable controlling whether the libdecor Wayland …\nA variable controlling whether video mode emulation is …\nA variable controlling how modes with a non-native aspect …\nA variable controlling whether the libdecor Wayland …\nA variable forcing non-DPI-aware Wayland windows to output …\nA variable specifying which shader compiler to preload …\nA variable controlling whether the X11 _…\nA variable controlling whether the X11 _NET_WM_PING …\nA variable controlling whether SDL uses DirectColor …\nA variable forcing the content scaling factor for X11 …\nA variable forcing the visual ID used for X11 display …\nA variable forcing the visual ID chosen for new X11 …\nA variable controlling whether the X11 XRandR extension …\nA variable controlling whether touch should be enabled on …\nA variable controlling whether touch should be enabled on …\nA variable controlling the module path on the PlayStation …\nA variable controlling whether to perform PVR …\nA variable controlling whether OpenGL should be used …\nA variable overriding the resolution reported on the …\nA variable controlling which touchpad should generate …\nA variable overriding the display index used in […\nSpecify the Vulkan library to load.\nA variable controlling the maximum number of chunks in a …\nA variable controlling how the fact chunk affects the …\nA variable controlling how the size of the RIFF chunk …\nA variable controlling how a truncated WAVE file is …\nA variable controlling whether SDL generates window-close …\nA variable controlling whether menus can be opened with …\nA variable controlling whether the windows message loop is …\nA variable controlling whether SDL will clear the window …\nA variable controlling whether SDL uses Kernel Semaphores …\nA variable controlling whether GameInput is used for raw …\nA variable to specify custom icon resource id from RC file …\nA variable to specify custom icon resource id from RC file …\nA variable controlling whether raw keyboard events are …\nA variable controlling whether SDL uses the D3D9Ex API …\nA variable controlling whether the window is activated …\nA variable controlling whether the window is activated …\nIf set to “0” then never set the top-most flag on an …\nA variable controlling whether the window frame and title …\nA variable controlling whether X11 windows are marked as …\nA variable specifying the type of an X11 window.\nSpecify the XCB library to load for the X11 driver.\nA variable controlling whether XInput should be used for …\nStatic method extensions for creating Surfaces\nMethod extensions for creating Textures from a …\nMethod extensions to Surface for saving to disk\nReturns the version of the dynamically linked <code>SDL_image</code> …\nload as a surface. except TGA\nload as a surface. This can load all supported image …\nA structure that provides an abstract interface to stream …\nReturns the argument unchanged.\nPrepares a read-only memory buffer for use with <code>IOStream</code>.\nPrepares a read-write memory buffer for use with <code>IOStream</code>.\nCreates an SDL file stream.\nReads a <code>Read</code> object into a buffer and then passes it to …\nCalls <code>U::from(self)</code>.\nGets the stream’s total size in bytes.\nThis is represented in SDL2 as a bitfield but obviously …\nWrapper around the <code>SDL_Joystick</code> object\nReturn true if the joystick has been opened and currently …\nGets the position of the given <code>axis</code>.\nReturn <code>Ok(true)</code> if <code>button</code> is pressed.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieve the joystick’s GUID\nQuery whether a joystick has an LED.\nQuery whether a joystick has rumble support.\nQuery whether a joystick has rumble support on triggers.\nReturn the position of <code>hat</code> for this joystick\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the name of the joystick or an empty string if no …\nRetrieve the number of axes for this joystick\nRetrieve the number of buttons for this joystick\nRetrieve the number of balls for this joystick\nRetrieve the battery level of this joystick\nSend a joystick specific effect packet.\nUpdate a joystick’s LED color.\nSet the rumble motors to their specified intensities, if …\nStart a rumble effect in the joystick’s triggers.\nKeyboard utility functions. Access with <code>Sdl::keyboard()</code>.\nText input utility functions. Access with …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGets the id of the window which currently has keyboard …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGets the scancode from a virtual key. Returns None if …\nGet a flags value with the bits of a flag with the given …\nGets the virtual key from a scancode. Returns None if …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns true if the scancode is pressed.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nReturns an iterator of pressed scancodes.\nThe intersection of a source flags value with the …\nReturns an iterator all scancodes with a boolean …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStandard log function which takes as priority INFO and as …\n<code>button_id</code> is the integer that will be returned by …\nSecond argument of the tuple (i32) corresponds to the …\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nShow a customizable message box.\nShow a simple message box, meant to be informative only.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nMouse utility functions. Access with <code>Sdl::mouse()</code>.\nGets the id of the window which currently has mouse focus.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the mouse button is pressed.\nReturns true if the mouse button is pressed.\nReturns true if the left mouse button is pressed.\nReturns true if the left mouse button is pressed.\nTests if the middle mouse button was pressed.\nTests if the middle mouse button was pressed.\nReturns an iterator all mouse buttons with a boolean …\nReturns an iterator all mouse buttons with a boolean …\nReturns an iterator of pressed mouse buttons.\nReturns an iterator of pressed mouse buttons.\nTests if the right mouse button was pressed.\nTests if the right mouse button was pressed.\nReturns the x coordinate of the state\nReturns the x coordinate of the state\nTests if the X1 mouse button was pressed.\nTests if the X1 mouse button was pressed.\nTests if the X2 mouse button was pressed.\nTests if the X2 mouse button was pressed.\nReturns the y coordinate of the state\nReturns the y coordinate of the state\nA pixel format, i.e. a set of masks that define how to …\nThe alpha mask\nThe blue mask\nBits per pixel; usually 15, 16, or 32\nCalculates the total byte size of an image buffer, given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe green mask\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new, uninitialized palette\nThe red mask\nCreates a palette from the provided colors\nSDL property type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nImmutable point type, consisting of x and y.\nA (non-empty) rectangle.\nReturns the y-position of the bottom side of this …\nReturns the bottom-left corner of this rectangle.\nReturns the bottom-right corner of this rectangle.\nReturns the center position of this rectangle.\nCenters the rectangle on the given point.\nChecks whether this rectangle contains a given point.\nChecks whether this rectangle completely contains another …\nExample\nExample\nExample\nExample\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new rectangle centered on the given position.\nCalculate a minimal rectangle enclosing a set of points. …\nDetermines whether two rectangles intersect.\nThe height of this rectangle.\nCalculates the intersection of a rectangle and a line …\nCalculates the intersection of two rectangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the x-position of the left side of this rectangle.\nThe maximal integer value that can be used for rectangles.\nThe minimal integer value that can be used for rectangle …\nCreates a new rectangle from the given values.\nCreates a new point from the given coordinates.\nMove this rect and clamp the positions to prevent …\nReturns a new point by shifting this point’s coordinates …\nReturns the underlying C Rect.\nMoves this rect to the given position after clamping the …\nResizes this rect to the given size after clamping the …\nReturns the x-position of the right side of this rectangle.\nReturns a new point by multiplying this point’s …\nSets the position of the bottom side of this rectangle to …\nSets the height of this rectangle to the given value, …\nSets the position of the right side of this rectangle to …\nSets the width of this rectangle to the given value, …\nSets the horizontal position of this rectangle to the …\nSets the vertical position of this rectangle to the given …\nReturns the width and height of this rectangle.\nReturns the y-position of the top side of this rectangle.\nReturns the top-left corner of this rectangle.\nReturns the top-right corner of this rectangle.\nCalculates the union of two rectangles (i.e. the smallest …\nThe width of this rectangle.\nThe horizontal position of this rectangle.\nReturns the x-coordinate of this point.\nThe vertical position of this rectangle.\nReturns the y-coordinate of this point.\nAdditive blending\nAlpha blending\nBlend mode for <code>Canvas</code>, <code>Texture</code> or <code>Surface</code>.\nManages and owns a target (<code>Surface</code> or <code>Window</code>) and allows …\nInvalid blending mode (indicates error)\nlinear filtering. this is the default\nColor modulate\nColor multiply\nnearest pixel sampling.\nno blending (replace destination with source).\nthe absence of a clipping rect\nRepresents structs which can be the target of a …\nManages what keeps a <code>SDL_Renderer</code> alive\nA structure that contains information on the capabilities …\na non-zero area clipping rect\nAlias for a <code>Canvas</code> that was created out of a <code>Surface</code>\nPossible errors returned by targeting a <code>Canvas</code> to render …\nA texture for a rendering context.\nCreates Textures that cannot outlive the creator\na clipping rect with zero area\nGets the additional alpha value multiplied into render …\nGets the blend mode used for drawing operations.\nGets the blend mode used for texture copy operations.\nClears the current rendering target with the drawing color.\nGets the clip rectangle for the current target.\nGets the additional color value multiplied into render …\nCopies a portion of the texture to the current rendering …\nCopies a portion of the texture to the current rendering …\nCreate a new renderer for a window.\nCreates a texture for a rendering context.\nCreates a texture from an existing surface.\nShorthand for …\nShorthand for …\nShorthand for …\nGets the color used for drawing operations (Rect, Line and …\nDraws a line on the current rendering target. Errors if …\nDraws a series of connected lines on the current rendering …\nDraws a point on the current rendering target. Errors if …\nDraws multiple points on the current rendering target. …\nDraws a rectangle on the current rendering target. Errors …\nDraws some number of rectangles on the current rendering …\nGets an iterator of all render drivers compiled into the …\nFills a rectangle on the current rendering target with the …\nFills some number of rectangles on the current rendering …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a 2D software rendering context for a surface.\nA convenience function for …\nshrink the clipping rect to the part which contains the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the associated surface of the Canvas and destroys the …\nGets the associated window of the Canvas and destroys the …\nLoads an SDL Texture from a file\nLoads an SDL Texture from a buffer that the format must be …\nGets device independent resolution for rendering.\nGets the output size of a rendering context.\nUpdates the screen with any rendering performed since the …\nGets the raw pointer to the SDL_Renderer\nCreate a texture from its raw <code>SDL_Texture</code>.\nReads pixels from the current rendering target.\nGets the drawing scale for the current target.\nGets the scale mode for use when rendered.\nSets an additional alpha value multiplied into render copy …\nSets the blend mode used for drawing operations (Fill and …\nSets the blend mode used for drawing operations (Fill and …\nSets the clip rectangle for rendering on the specified …\nSets an additional color value multiplied into render copy …\nSets the color used for drawing operations (Rect, Line and …\nSets a device independent resolution for rendering.\nSets the drawing scale for rendering on the current target.\nSets the scale mode for use when rendered.\nSets the drawing area for rendering on the current target.\nGets a reference to the associated surface of the Canvas\nGets a mutable reference to the associated surface of the …\nReturns a <code>TextureCreator</code> that can create Textures to be …\nReturns a <code>TextureCreator</code> that can create Textures to be …\nUpdates the given texture rectangle with new pixel data.\nUpdates a rectangle within a planar YV12 or IYUV texture …\nGets the drawing area for the current target.\nGets a reference to the associated window of the Canvas\nGets a mutable reference to the associated window of the …\nLocks the texture for <strong>write-only</strong> pixel access. The texture …\nSame as <code>with_texture_canvas</code>, but allows to change multiple …\nTemporarily sets the target of <code>Canvas</code> to a <code>Texture</code>. This …\nHolds an <code>Arc&lt;SurfaceContext&gt;</code>.\nHolds a <code>SDL_Surface</code>\nAn unsized Surface reference.\nA convenience function for …\nPerforms surface blitting (surface copying).\nPerforms scaled surface bliting (surface copying).\nGets the clip rectangle for the surface.\nThe function will fail if the surface doesn’t have color …\nCopies the surface into a new one that is optimized for …\nCopies the surface into a new one of a specified pixel …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new surface from an existing buffer, using a …\nCreates a new surface from an existing buffer, using pixel …\nLoads an SDL Surface from a file\nCreates a new surface using pixel masks.\nLoads an SDL Surface from XPM data\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a Software Canvas to allow rendering in the …\nPerforms low-level surface blitting.\nPerforms low-level scaled surface blitting.\nReturns true if the Surface needs to be locked before …\nCreates a new surface using a pixel format.\nGets the rect of the surface.\nSaves an SDL Surface to a file\nSaves an SDL Surface to an IOStream\nThe function will fail if the blend mode is not supported …\nSets the clip rectangle for the surface.\nPerforms bilinear scaling between two surfaces of the same …\nLocks a surface so that the pixels can be directly …\nLocks a surface so that the pixels can be directly …\nReturns the Surface’s pixel buffer if the Surface doesn…\nReturns the Surface’s pixel buffer if the Surface doesn…\nType alias for the timer callback function.\nConstructs a new timer using the boxed closure <code>callback</code>.\nSleeps the current thread for the specified amount of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the closure as a trait-object and cancels the timer\nGets the number of milliseconds elapsed since the timer …\nReturns the argument unchanged.\nthe finger ID\nCalls <code>U::from(self)</code>.\nGet a list of registered touch devices.\nthe quantity of pressure applied, normalized (0…1)\nthe x-axis location of the touch event, normalized (0…1)\nthe y-axis location of the touch event, normalized (0…1)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOpens a URL/URI in the default system-provided application.\nA structure that contains information about the version of …\nReturns the argument unchanged.\nConvert a raw sdl version number to Version.\nCalls <code>U::from(self)</code>.\nmajor version\nminor version\nupdate version (patchlevel)\nGet the version of SDL that is linked against your program.\nFlash the window briefly to get attention\nCancel any window flash state\nOpenGL compatibility profile - deprecated functions are …\nOpenGL core profile - deprecated functions are disabled\nDark colored system theme.\nRepresents a setting for a window flash operation.\nOpenGL ES profile - only a subset of the base OpenGL …\nThe display is in landscape mode, with the right side up, …\nThe display is in landscape mode, with the left side up, …\nLight colored system theme.\nRepresents orientation of a display.\nThe type that allows you to build popup windows.\nThe display is in portrait mode\nThe display is in portrait mode, upside down\nRepresents a setting for vsync/swap interval.\nSystem theme.\nUnknown system theme.\nUnknown profile - SDL will tend to return 0 if you ask …\nThe display orientation can’t be determined\nFlash the window until it gets focus\n(<code>sdl3-sys</code>) Enable a <code>use-ash-*</code> feature to alias this to …\nRepresents the “shell” of a <code>Window</code>.\nThe type that allows you to build windows.\nHolds a <code>SDL_Window</code>\nSets the window to be shown on top of all other windows\nUse this function to get the size of a window’s borders …\nRemoves the window decoration.\nBuilds the popup window\nBuilds the window.\nGets an iterator of all video drivers compiled into the …\nGives up this WindowSurfaceRef, allowing to use the window …\nRequests a window to demand attention from the user.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnsafe if the <code>*mut SDL_Window</code> is used after the …\nCreate a new <code>Window</code> without taking ownership of the …\nSets the window to fullscreen.\nGet the name of the display at the index <code>display_name</code>.\nReturn orientation of a display or Unknown if orientation …\nReturn orientation of a display or Unknown if orientation …\nOpenGL context getters and setters\nSet the window’s OpenGL context to the current context …\nDoes the window have input focus?\nHas the window grabbed input focus?\nDoes the window have mouse focus?\nHides the window.\nHides the window.\nSets the window to have grabbed input focus.\nSets the window to have grabbed input focus.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInitializes a new `WindowCanvas’;\nReturns true if the OpenGL context is the current one in …\nIs the window maximized?\nIs the window minimized?\nMaximizes the window.\nCreate a SDL_MetalView when constructing the window. This …\nCreate a SDL_MetalView when constructing the window. This …\nMinimizes the window.\nInitializes a new <code>PopupWindowBuilder</code>.\nInitializes a new <code>WindowBuilder</code>.\nSets the window offset relative to the parent window.\nReturns the transparency of the window, as a value between …\nSets the window to be usable with an OpenGL context\nSets the window to be usable with an OpenGL context\nSets the window to be a popup menu.\nSets the window position.\nCenters the window.\nSets the window to be resizable.\nSets the window to be resizable.\nUse this function to set the icon for a window.\nSet the transparency of the window. The given value will …\nSets the underlying window flags. This will effectively …\nSets the underlying window flags. This will effectively …\nReturns a WindowSurfaceRef, which can be used like a …\nSets the window to be a tooltip.\nSets the window to be transparent\nUpdates the change made to the inner Surface to the Window …\nSame as <code>update_window</code>, but only update the parts included …\nSets the window to be usable with a Vulkan instance\nSets the window to be usable with a Vulkan instance\nCreate a Vulkan rendering surface for a window.\nGet the names of the Vulkan instance extensions needed to …\nGets the underlying window flags.\nGets the underlying window flags.\nThe type that allows you to build a OpenGL context …\nOpenGL context getters and setters. Obtain with …\n<strong>Gets</strong> the attribute: whether to require hardware …\n<strong>Gets</strong> the attribute: the minimum number of bits for the …\n<strong>Gets</strong> the attribute: the minimum number of bits for the …\n<strong>Gets</strong> the attribute: the minimum number of bits for the …\n<strong>Gets</strong> the attribute: the minimum number of bits for the red …\n<strong>Gets</strong> the attribute: the minimum number of bits for the …\n<strong>Gets</strong> the attribute: the minimum number of bits for the …\n<strong>Gets</strong> the attribute: the minimum number of bits for frame …\n<strong>Gets</strong> the applied OpenGL context configuration flags.\n<strong>Gets</strong> the attribute: OpenGL context major version\n<strong>Gets</strong> the attribute: OpenGL context minor version\n<strong>Gets</strong> the attribute: disables OpenGL error checking; …\n<strong>Gets</strong> the attribute: type of GL context (Core, …\n<strong>Gets</strong> the OpenGL context major and minor versions as a …\nSets the context into “debug” mode.\n<strong>Gets</strong> the attribute: the minimum number of bits in the …\n<strong>Gets</strong> the attribute: whether the output is single or double …\nSets the context into “forward compatible” mode.\n<strong>Gets</strong> the attribute: requests sRGB capable visual; defaults …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<strong>Gets</strong> the attribute: the minimum number of bits for the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<strong>Gets</strong> the attribute: the number of buffers used for …\n<strong>Gets</strong> the attribute: the number of samples used around the …\n<strong>Gets</strong> the attribute: the minimum number of bits for the red …\nFinishes the builder and applies the GL context flags to …\n<strong>Sets</strong> the attribute: whether to require hardware …\n<strong>Sets</strong> the attribute: the minimum number of bits for the …\n<strong>Sets</strong> the attribute: the minimum number of bits for the …\n<strong>Sets</strong> the attribute: the minimum number of bits for the …\n<strong>Sets</strong> the attribute: the minimum number of bits for the red …\n<strong>Sets</strong> the attribute: the minimum number of bits for the …\n<strong>Sets</strong> the attribute: the minimum number of bits for the …\n<strong>Sets</strong> the attribute: the minimum number of bits for frame …\n<strong>Sets</strong> any combination of OpenGL context configuration flags.\n<strong>Sets</strong> the attribute: OpenGL context major version\n<strong>Sets</strong> the attribute: OpenGL context minor version\n<strong>Sets</strong> the attribute: disables OpenGL error checking; …\n<strong>Sets</strong> the attribute: type of GL context (Core, …\n<strong>Sets</strong> the OpenGL context major and minor versions.\n<strong>Sets</strong> the attribute: the minimum number of bits in the …\n<strong>Sets</strong> the attribute: whether the output is single or double …\n<strong>Sets</strong> the attribute: requests sRGB capable visual; defaults …\n<strong>Sets</strong> the attribute: the minimum number of bits for the …\n<strong>Sets</strong> the attribute: the number of buffers used for …\n<strong>Sets</strong> the attribute: the number of samples used around the …\n<strong>Sets</strong> the attribute: the minimum number of bits for the red …\n<strong>Sets</strong> the attribute: OpenGL context sharing; defaults to …\n<strong>Sets</strong> the attribute: the minimum number of bits in the …\n<strong>Sets</strong> the attribute: whether the output is stereo 3D; …\n<strong>Gets</strong> the attribute: OpenGL context sharing; defaults to …\n<strong>Gets</strong> the attribute: the minimum number of bits in the …\n<strong>Gets</strong> the attribute: whether the output is stereo 3D; …")
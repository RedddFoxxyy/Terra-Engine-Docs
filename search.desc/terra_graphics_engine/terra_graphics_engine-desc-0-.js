searchState.loadedDescShard("terra_graphics_engine", 0, "The Terra Graphics Engine library is a 2D game engine, …\nNOTE: I am for now wrapping shader_program, vao, and vbo …\nAdds a new shader program to the global shader programs if …\nReturns the argument unchanged.\nReturns the current Global gl_Parameters(vao, vbo and …\nReturns the current Global Shader Program from the …\nReturns the current Global Vertex_Array from the T_Context …\nReturns the current Global Vertex_Buffer from the …\nCalls <code>U::from(self)</code>.\nDeclaration of python module. Reference: …\nTest Module\nWindow Module for Terra Graphics Engine.\nShapes Module\nDeclaration of the shapes submodule for the parent python …\nDraw a circle with the given radius at given screen …\nDraw a quarter circle on the screen with rounding based on …\nDraw a rectangle of the given width and height at given …\nDraw a rectangle with rounded corners using four quarter …\nReturns a reference(Reference Counting wrapped reference) …\nDeclaration of the objects submodule for the parent python …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDraws different types of shapes like rectangle, hexagon, …\nConverts an HSV color to its RGB equivalent.\nDeclaration of the test submodule for the parent python …\nA simple color gradient sdl3 example but using OpenGL(Glow …\nCreate SDL3 Window with OpenGL context.\nInitialise the Global vao, vbo and shader program and also …\nDeclaration of the window submodule for the parent python …\nLoads the icon from the relative icon path passed, and sets")
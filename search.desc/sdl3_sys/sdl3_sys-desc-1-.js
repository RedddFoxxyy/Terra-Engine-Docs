searchState.loadedDescShard("sdl3_sys", 1, "Log a message with <code>SDL_LOG_PRIORITY_TRACE</code>.\nLog a message with <code>SDL_LOG_PRIORITY_VERBOSE</code>.\nLog a message with <code>SDL_LOG_PRIORITY_WARN</code>.\nReset all priorities to default.\nReplace the default log output function with one of your …\nSet the priority of all log categories.\nSet the priority of a particular log category.\nSet the text prepended to log messages of a given priority.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo value.\nApp-implemented event entry point for …\nApp-implemented initial entry point for …\nApp-implemented iteration entry point for …\nApp-implemented deinit entry point for …\nAn entry point for SDL’s use in SDL_MAIN_USE_CALLBACKS.\nCallback from the application to let the suspend continue.\nInform SDL that the app is providing an entry point …\nRegister a win32 window class for SDL’s use.\nInitializes and launches an SDL application, by doing …\nCircumvent failure of <code>SDL_Init()</code> when not using <code>SDL_main()</code> …\nDeregister the win32 window class from an <code>SDL_RegisterApp</code> …\nAn app-supplied function for program entry.\nThe prototype for the application’s main() function\nSome value of type <code>T</code>.\nSize of the colors array of <code>SDL_MessageBoxColorScheme</code>.\nbuttons placed left to right\nbuttons placed right to left\nMarks the default button when escape is hit\nMarks the default button when return is hit\nSize of the colors array of <code>SDL_MessageBoxColorScheme</code>.\nerror dialog\ninformational dialog\nwarning dialog\nIndividual button data.\n<code>SDL_MessageBoxButtonData</code> flags.\nRGB value used in a message box color scheme\nA set of colors to use for message box dialogs\nAn enumeration of indices inside the colors array of …\nMessageBox structure containing title, text, window, etc.\nMessage box flags.\nCreate a modal message box.\nDisplay a simple modal message box.\nUser defined button id (value returned via …\n<code>SDL_MessageBoxColorScheme</code>, can be NULL to use system …\nInitialize all fields to zero\nInitialize all fields to zero\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUTF-8 message text\nThe UTF-8 button text\nUTF-8 title\nParent window, can be NULL\nA handle to a CAMetalLayer-backed NSView (macOS) or UIView …\nCreate a CAMetalLayer-backed NSView/UIView and attach it …\nDestroy an existing <code>SDL_MetalView</code> object.\nGet a pointer to the backing CAMetalLayer for the given …\nOpen a URL/URI in the browser or other appropriate …\nCrosshair.\nDefault cursor. Usually an arrow.\nDouble arrow pointing west and east.\nWindow resize right. May be EW_RESIZE.\nThe scroll direction is flipped / natural\nFour pointed arrow pointing north, south, east, and west.\nDouble arrow pointing northeast and southwest.\nWindow resize top-right. May be NESW_RESIZE.\nThe scroll direction is normal\nNot permitted. Usually a slashed circle or crossbones.\nDouble arrow pointing north and south.\nDouble arrow pointing northwest and southeast.\nWindow resize top-left. This may be a single arrow or a …\nWindow resize top. May be NS_RESIZE.\nPointer that indicates a link. Usually a pointing hand.\nProgram is busy but still interactive. Usually it’s WAIT …\nCapture the mouse and to track input outside an SDL window.\nCreate a color cursor.\nCreate a cursor using the specified bitmap data and mask …\nCreate a system cursor.\nThe structure used to identify an SDL cursor.\nReturn whether the cursor is currently being shown.\nFree a previously-created cursor.\nGet the active cursor.\nGet the default cursor.\nQuery the platform for the asynchronous mouse button state …\nGet a list of currently connected mice.\nGet the window which currently has mouse focus.\nGet the name of a mouse.\nQuery SDL’s cache for the synchronous mouse button state …\nQuery SDL’s cache for the synchronous mouse button state …\nQuery whether relative mouse mode is enabled for a window.\nReturn whether a mouse is currently connected.\nHide the cursor.\nThe scroll direction is flipped / natural\nThe scroll direction is normal\nA bitmask of pressed mouse buttons, as reported by …\nThis is a unique ID for a mouse for the time it is …\nScroll direction types for the Scroll event\nCrosshair.\nDefault cursor. Usually an arrow.\nDouble arrow pointing west and east.\nWindow resize right. May be EW_RESIZE.\nFour pointed arrow pointing north, south, east, and west.\nDouble arrow pointing northeast and southwest.\nWindow resize top-right. May be NESW_RESIZE.\nNot permitted. Usually a slashed circle or crossbones.\nDouble arrow pointing north and south.\nDouble arrow pointing northwest and southeast.\nWindow resize top-left. This may be a single arrow or a …\nWindow resize top. May be NS_RESIZE.\nPointer that indicates a link. Usually a pointing hand.\nProgram is busy but still interactive. Usually it’s WAIT …\nWindow resize bottom-right. May be NWSE_RESIZE.\nWindow resize bottom-left. May be NESW_RESIZE.\nWindow resize bottom. May be NS_RESIZE.\nText selection. Usually an I-beam.\nWait. Usually an hourglass or watch or spinning ball.\nWindow resize left. May be EW_RESIZE.\nSet the active cursor.\nSet relative mouse mode for a window.\nShow the cursor.\nCursor types for <code>SDL_CreateSystemCursor()</code>.\nMove the mouse to the given position in global screen …\nMove the mouse cursor to the given position within the …\nWindow resize bottom-right. May be NWSE_RESIZE.\nWindow resize bottom-left. May be NESW_RESIZE.\nWindow resize bottom. May be NS_RESIZE.\nText selection. Usually an I-beam.\nWait. Usually an hourglass or watch or spinning ball.\nWindow resize left. May be EW_RESIZE.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRestart all threads that are waiting on the condition …\nA means to block multiple threads until a condition is …\nCreate a condition variable.\nCreate a new mutex.\nCreate a new read/write lock.\nCreate a semaphore.\nDestroy a condition variable.\nDestroy a mutex created with <code>SDL_CreateMutex()</code>.\nDestroy a read/write lock created with <code>SDL_CreateRWLock()</code>.\nDestroy a semaphore.\nGet the current value of a semaphore.\nA structure used for thread-safe initialization and …\nThe current status of an <code>SDL_InitState</code> structure.\nLock the mutex.\nLock the read/write lock for <em>read only</em> operations.\nLock the read/write lock for <em>write</em> operations.\nA means to serialize access to a resource between threads.\nA mutex that allows read-only threads to run in parallel.\nA means to manage access to a resource, by count, between …\nFinish an initialization state transition.\nReturn whether initialization should be done.\nReturn whether cleanup should be done.\nRestart one of the threads that are waiting on the …\nAtomically increment a semaphore’s value and wake …\nTry to lock a mutex without blocking.\nTry to lock a read/write lock <em>for reading</em> without blocking.\nTry to lock a read/write lock <em>for writing</em> without blocking.\nSee if a semaphore has a positive value and decrement it …\nUnlock the mutex.\nUnlock the read/write lock.\nWait until a condition variable is signaled.\nWait until a condition variable is signaled or a certain …\nWait until a semaphore has a positive value and then …\nWait until a semaphore has a positive value and then …\nInitialize all fields to zero\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTotal known pen axis types in this version of SDL. This …\nPen distance to drawing surface.  Unidirectional: 0.0 to …\nPen pressure.  Unidirectional: 0 to 1.0\nPen barrel rotation.  Bidirectional: -180 to 179.9 …\nTotal known pen axis types in this version of SDL. This …\nPen distance to drawing surface.  Unidirectional: 0.0 to …\nPen pressure.  Unidirectional: 0 to 1.0\nPen barrel rotation.  Bidirectional: -180 to 179.9 …\nPen finger wheel or slider (e.g., Airbrush Pen).  …\nPressure from squeezing the pen (“barrel pressure”).\nPen horizontal tilt angle.  Bidirectional: -90.0 to 90.0 …\nPen vertical tilt angle.  Bidirectional: -90.0 to 90.0 …\nbutton 1 is pressed\nbutton 2 is pressed\nbutton 3 is pressed\nbutton 4 is pressed\nbutton 5 is pressed\npen is pressed down\neraser tip is used\nThe <code>SDL_MouseID</code> for mouse events simulated with pen input.\nThe <code>SDL_TouchID</code> for touch events simulated with pen input.\nPen axis indices.\nSDL pen instance IDs.\nPen input flags, as reported by various pen events’ …\nPen finger wheel or slider (e.g., Airbrush Pen).  …\nPressure from squeezing the pen (“barrel pressure”).\nPen horizontal tilt angle.  Bidirectional: -90.0 to 90.0 …\nPen vertical tilt angle.  Bidirectional: -90.0 to 90.0 …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nITU-R BT1361 Extended Colour Gamut\nITU-R BT.2020-2 / ITU-R BT.2100-0\nITU-R BT2020 for 10-bit system\nITU-R BT2020 for 12-bit system\nITU-R BT.2020-2 constant luminance\nEquivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020\nEquivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020\nITU-R BT.2020-2 non-constant luminance\nITU-R BT.470-6 System B, G / ITU-R BT.601-7 625\nITU-R BT.470-6 System B, G / ITU-R BT.601-7 625, …\nITU-R BT.470-6 System M\nITU-R BT.601-7 525, SMPTE 170M\nSMPTE ST 170M / ITU-R BT.601-7 525 or 625\nITU-R BT.601-7 525\nEquivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601\nEquivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601\nITU-R BT.709-6\nRec. ITU-R BT.709-6 / ITU-R BT1361\nITU-R BT.709-6\nEquivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709\nEquivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709\nIn JPEG/JFIF, H.261, and MPEG-1, Cb and Cr are taken at …\nEBU Tech. 3213-E\nAndroid video texture format\nUS FCC Title 47\nFull range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 …\nITU-R BT.470-6 System M / ITU-R BT1700 625 PAL &amp; SECAM\nITU-R BT.470-6 System B, G\nGeneric film (color filters using Illuminant C)\nEquivalent to DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020\nARIB STD-B67, known as “hybrid log-gamma” (HLG)\nITU-R BT.2100-0 ICTCP\nIEC 61966-2-4\nPlanar mode: Y + U + V  (3 planes)\nEquivalent to …\nIn MPEG-2, MPEG-4, and AVC, Cb and Cr are taken on …\nNarrow range, e.g. 16-235 for 8-bit RGB and luma, and …\nRGB, no chroma sampling\nPlanar mode: Y + U/V interleaved  (2 planes)\nPlanar mode: Y + V/U interleaved  (2 planes)\nPlanar mode: Y + U/V interleaved  (2 planes)\nSMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems\nThe default colorspace for RGB surfaces if no colorspace …\nA fully opaque 8-bit alpha value.\nA fully opaque floating point alpha value.\nA fully transparent 8-bit alpha value.\nA fully transparent floating point alpha value.\nArray component order, low byte -&gt; high byte.\nA macro to determine an SDL_PixelFormat’s bits per pixel.\nA macro to determine an SDL_PixelFormat’s bytes per …\nBitmap pixel order, high bit -&gt; low bit.\nIn JPEG/JFIF, H.261, and MPEG-1, Cb and Cr are taken at …\nIn MPEG-2, MPEG-4, and AVC, Cb and Cr are taken on …\nRGB, no chroma sampling\nIn HEVC for BT.2020 and BT.2100 content (in particular on …\nA macro to retrieve the chroma sample location of an …\nA macro to retrieve the matrix coefficients of an …\nA macro to retrieve the primaries of an <code>SDL_Colorspace</code>.\nA macro to retrieve the range of an <code>SDL_Colorspace</code>.\nA macro to retrieve the transfer characteristics of an …\nA macro to retrieve the type of an <code>SDL_Colorspace</code>.\nEquivalent to DXGI_COLOR_SPACE_YCBCR_FULL_G22_LEFT_P2020\nEquivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P2020\nEquivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601\nEquivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P601\nEquivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709\nEquivalent to DXGI_COLOR_SPACE_YCBCR_STUDIO_G22_LEFT_P709\nEquivalent to DXGI_COLOR_SPACE_RGB_FULL_G2084_NONE_P2020\nEquivalent to …\nThe default colorspace for RGB surfaces if no colorspace …\nEquivalent to DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709\nEquivalent to DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709\nThe default colorspace for YUV surfaces if no colorspace …\nITU-R BT.2020-2 / ITU-R BT.2100-0\nITU-R BT.470-6 System B, G / ITU-R BT.601-7 625\nITU-R BT.470-6 System M\nITU-R BT.601-7 525, SMPTE 170M\nITU-R BT.709-6\nEBU Tech. 3213-E\nGeneric film (color filters using Illuminant C)\nSMPTE 240M, functionally the same as …\nSMPTE RP 431-2\nSMPTE EG 432-1 / DCI P3\nSMPTE ST 428-1\nFull range, e.g. 0-255 for 8-bit RGB and luma, and 1-255 …\nNarrow range, e.g. 16-235 for 8-bit RGB and luma, and …\nColorspace chroma sample location.\nA structure that represents a color as RGBA components.\nColorspace color primaries, as described by …\nColorspace color range, as described by …\nColorspace color type.\nColorspace definitions.\nCreate a palette structure with the specified number of …\nA macro for defining custom <code>SDL_Colorspace</code> formats.\nA macro for defining custom non-FourCC pixel formats.\nA macro for defining custom FourCC pixel formats.\nFree a palette created with <code>SDL_CreatePalette()</code>.\nThe bits of this structure can be directly reinterpreted …\nConvert one of the enumerated pixel formats to a bpp value …\nCreate an <code>SDL_PixelFormatDetails</code> structure corresponding …\nConvert a bpp value and RGBA masks to an enumerated pixel …\nGet the human readable name of a pixel format.\nGet RGB values from a pixel in the specified format.\nGet RGBA values from a pixel in the specified format.\nA macro to determine if an <code>SDL_Colorspace</code> has a full range.\nA macro to determine if an <code>SDL_Colorspace</code> has a limited …\nA macro to determine if an <code>SDL_Colorspace</code> uses BT2020_NCL …\nA macro to determine if an <code>SDL_Colorspace</code> uses BT601 (or …\nA macro to determine if an <code>SDL_Colorspace</code> uses BT709 …\nA macro to determine if an <code>SDL_PixelFormat</code> is a 10-bit …\nA macro to determine if an <code>SDL_PixelFormat</code> has an alpha …\nA macro to determine if an <code>SDL_PixelFormat</code> is an array …\nA macro to determine if an <code>SDL_PixelFormat</code> is a floating …\nA macro to determine if an <code>SDL_PixelFormat</code> is a “FourCC…\nA macro to determine if an <code>SDL_PixelFormat</code> is an indexed …\nA macro to determine if an <code>SDL_PixelFormat</code> is a packed …\nITU-R BT.2020-2 constant luminance\nITU-R BT.2020-2 non-constant luminance\nITU-R BT.470-6 System B, G / ITU-R BT.601-7 625, …\nITU-R BT.601-7 525\nITU-R BT.709-6\nUS FCC Title 47\nITU-R BT.2100-0 ICTCP\nSMPTE ST 2085\nSMPTE 240M\nMap an RGB triple to an opaque pixel value for a given …\nMap an RGBA quadruple to a pixel value for a given pixel …\nColorspace matrix coefficients.\nA macro to retrieve the flags of an <code>SDL_PixelFormat</code>.\nAndroid video texture format\nPlanar mode: Y + U + V  (3 planes)\nPlanar mode: Y + U/V interleaved  (2 planes)\nPlanar mode: Y + V/U interleaved  (2 planes)\nPlanar mode: Y + U/V interleaved  (2 planes)\nPacked mode: U0+Y0+V0+Y1 (1 plane)\nPacked mode: Y0+U0+Y1+V0 (1 plane)\nPlanar mode: Y + V + U  (3 planes)\nPacked mode: Y0+V0+Y1+U0 (1 plane)\nA macro to retrieve the layout of an <code>SDL_PixelFormat</code>.\nA macro to retrieve the order of an <code>SDL_PixelFormat</code>.\nA macro to retrieve the type of an <code>SDL_PixelFormat</code>.\nPacked component layout.\nPacked component order, high bit -&gt; low bit.\nA set of indexed colors representing a palette.\nPixel format.\nDetails about the format of a pixel.\nPixel type.\nSet a range of colors in a palette.\nITU-R BT1361 Extended Colour Gamut\nITU-R BT2020 for 10-bit system\nITU-R BT2020 for 12-bit system\nSMPTE ST 170M / ITU-R BT.601-7 525 or 625\nRec. ITU-R BT.709-6 / ITU-R BT1361\nITU-R BT.470-6 System M / ITU-R BT1700 625 PAL &amp; SECAM\nITU-R BT.470-6 System B, G\nARIB STD-B67, known as “hybrid log-gamma” (HLG)\nIEC 61966-2-4\nSMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems\nSMPTE ST 240M\nSMPTE ST 428-1\nIEC 61966-2-1 (sRGB or sYCC)\nColorspace transfer characteristics.\nSMPTE ST 2085\nSMPTE 240M, functionally the same as …\nSMPTE ST 240M\nSMPTE 240M\nSMPTE ST 428-1\nSMPTE RP 431-2\nSMPTE EG 432-1 / DCI P3\nIEC 61966-2-1 (sRGB or sYCC)\nEquivalent to DXGI_COLOR_SPACE_RGB_FULL_G22_NONE_P709\nEquivalent to DXGI_COLOR_SPACE_RGB_FULL_G10_NONE_P709\nIn HEVC for BT.2020 and BT.2100 content (in particular on …\nPacked mode: U0+Y0+V0+Y1 (1 plane)\nSMPTE ST 428-1\nThe default colorspace for YUV surfaces if no colorspace …\nPacked mode: Y0+U0+Y1+V0 (1 plane)\nPlanar mode: Y + V + U  (3 planes)\nPacked mode: Y0+V0+Y1+U0 (1 plane)\nan array of colors, <code>ncolors</code> long.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nnumber of elements in <code>colors</code>.\ninternal use only, do not touch.\ninternal use only, do not touch.\nGet the name of the platform.\nPlugged in, battery charged\nPlugged in, charging battery\nerror determining power status\nPlugged in, no battery available\nNot plugged in, running on the battery\nGet the current power supply details.\nPlugged in, battery charged\nPlugged in, charging battery\nerror determining power status\nPlugged in, no battery available\nNot plugged in, running on the battery\ncannot determine power status\nThe basic state for the system’s power supply.\ncannot determine power status\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe I/O stream is connected to a new <code>SDL_IOStream</code> that the …\nThe I/O stream is inherited from the application.\nThe I/O stream is ignored.\nThe I/O stream is redirected to an existing <code>SDL_IOStream</code>.\nCreate a new process.\nCreate a new process with the specified properties.\nDestroy a previously created process object.\nGet the <code>SDL_IOStream</code> associated with process standard …\nGet the <code>SDL_IOStream</code> associated with process standard …\nGet the properties associated with a process.\nStop a process.\nThe I/O stream is connected to a new <code>SDL_IOStream</code> that the …\nThe I/O stream is inherited from the application.\nThe I/O stream is ignored.\nThe I/O stream is redirected to an existing <code>SDL_IOStream</code>.\nAn opaque handle representing a system process.\nDescription of where standard I/O should be directed when …\nRead all the output from a process.\nWait for a process to finish.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo value.\nNo value.\nA callback used to free resources when a property is …\nClear a property from a group of properties.\nCopy a group of properties.\nCreate a group of properties.\nDestroy a group of properties.\nEnumerate the properties contained in a group of …\nA callback used to enumerate all the properties in a group …\nGet a boolean property from a group of properties.\nGet a floating point property from a group of properties.\nGet the global SDL properties.\nGet a number property from a group of properties.\nGet a pointer property from a group of properties.\nGet the type of a property in a group of properties.\nGet a string property from a group of properties.\nReturn whether a property exists in a group of properties.\nLock a group of properties.\nSDL properties ID\nSDL property type\nSet a boolean property in a group of properties.\nSet a floating point property in a group of properties.\nSet an integer property in a group of properties.\nSet a pointer property in a group of properties.\nSet a pointer property in a group of properties with a …\nSet a string property in a group of properties.\nUnlock a group of properties.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe structure that defines a point (using floating point …\nA rectangle, with the origin at the upper left (using …\nCalculate the intersection of a rectangle and line segment.\nCalculate the intersection of a rectangle and line segment …\nCalculate a minimal rectangle enclosing a set of points.\nCalculate a minimal rectangle enclosing a set of points …\nCalculate the intersection of two rectangles.\nCalculate the intersection of two rectangles with float …\nCalculate the union of two rectangles.\nCalculate the union of two rectangles with float precision.\nDetermine whether two rectangles intersect.\nDetermine whether two rectangles intersect with float …\nThe structure that defines a point (using integers).\nDetermine whether a point resides inside a rectangle.\nDetermine whether a point resides inside a floating point …\nA rectangle, with the origin at the upper left (using …\nDetermine whether a rectangle has no area.\nDetermine whether a floating point rectangle can contain …\nConvert an <code>SDL_Rect</code> to <code>SDL_FRect</code>\nDetermine whether two rectangles are equal.\nDetermine whether two floating point rectangles are equal, …\nDetermine whether two floating point rectangles are equal, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThere is no logical size in effect\nThe rendered content is scaled up by integer multiples to …\nThe rendered content is fit to the largest dimension and …\nThe rendered content is fit to the smallest dimension and …\nAdd a set of synchronization semaphores for the current …\nConvert the coordinates in an event to render coordinates.\nCreate a 2D rendering context for a window.\nCreate a 2D rendering context for a window, with the …\nCreate a 2D software rendering context for a surface.\nCreate a texture for a rendering context.\nCreate a texture from an existing surface.\nCreate a texture for a rendering context with the …\nCreate a window and default renderer.\nThe size, in pixels, of a single <code>SDL_RenderDebugText()</code> …\nDestroy the rendering context for a window and free all …\nDestroy the specified texture.\nForce the rendering context to flush any pending commands …\nGet the current output size in pixels of a rendering …\nGet the number of 2D rendering drivers available for the …\nGet the clip rectangle for the current target.\nGet the color scale used for render operations.\nGet the blend mode used for drawing operations.\nGet the color used for drawing operations (Rect, Line and …\nGet the color used for drawing operations (Rect, Line and …\nUse this function to get the name of a built in 2D …\nGet device independent resolution and presentation mode …\nGet the final presentation rectangle for rendering.\nGet the Metal command encoder for the current frame.\nGet the CAMetalLayer associated with the given Metal …\nGet the output size in pixels of a rendering context.\nGet the safe area for rendering within the current …\nGet the drawing scale for the current target.\nGet the current render target.\nGet VSync of the given renderer.\nGet the drawing area for the current target.\nGet the window associated with a renderer.\nGet the renderer associated with a window.\nGet the renderer that created an <code>SDL_Texture</code>.\nGet the name of a renderer.\nGet the properties associated with a renderer.\nGet the additional alpha value multiplied into render copy …\nGet the additional alpha value multiplied into render copy …\nGet the blend mode used for texture copy operations.\nGet the additional color value multiplied into render copy …\nGet the additional color value multiplied into render copy …\nGet the properties associated with a texture.\nGet the scale mode used for texture scale operations.\nGet the size of a texture, as floating point values.\nThere is no logical size in effect\nThe rendered content is scaled up by integer multiples to …\nThe rendered content is fit to the largest dimension and …\nThe rendered content is fit to the smallest dimension and …\nThe rendered content is stretched to the output resolution\nLock a portion of the texture for <strong>write-only</strong> pixel access.\nLock a portion of the texture for <strong>write-only</strong> pixel access, …\nClear the current rendering target with the drawing color.\nGet whether clipping is enabled on the given renderer.\nGet a point in render coordinates when given a point in …\nGet a point in window coordinates when given a point in …\nDraw debug text to an <code>SDL_Renderer</code>.\nDraw debug text to an <code>SDL_Renderer</code>.\nFill a rectangle on the current rendering target with the …\nFill some number of rectangles on the current rendering …\nRender a list of triangles, optionally using a texture and …\nRender a list of triangles, optionally using a texture and …\nDraw a line on the current rendering target at subpixel …\nDraw a series of connected lines on the current rendering …\nDraw a point on the current rendering target at subpixel …\nDraw multiple points on the current rendering target at …\nUpdate the screen with any rendering performed since the …\nRead pixels from the current rendering target.\nDraw a rectangle on the current rendering target at …\nDraw some number of rectangles on the current rendering …\nCopy a portion of the texture to the current rendering …\nPerform a scaled copy using the 9-grid algorithm to the …\nCopy a portion of the source texture to the current …\nCopy a portion of the source texture to the current …\nTile a portion of the texture to the current rendering …\nReturn whether an explicit rectangle was set as the …\nA structure representing rendering state\nHow the logical size is mapped to the output.\nThe name of the software renderer.\nSet the clip rectangle for rendering on the specified …\nSet the color scale used for render operations.\nSet the blend mode used for drawing operations (Fill and …\nSet the color used for drawing operations.\nSet the color used for drawing operations (Rect, Line and …\nSet a device independent resolution and presentation mode …\nSet the drawing scale for rendering on the current target.\nSet a texture as the current rendering target.\nToggle VSync of the given renderer.\nSet the drawing area for rendering on the current target.\nSet an additional alpha value multiplied into render copy …\nSet an additional alpha value multiplied into render copy …\nSet the blend mode for a texture, used by …\nSet an additional color value multiplied into render copy …\nSet an additional color value multiplied into render copy …\nSet the scale mode used for texture scale operations.\nChanges rarely, not lockable\nChanges frequently, lockable\nTexture can be used as a render target\nAn efficient driver-specific representation of pixel data\nThe access pattern allowed for a texture.\nUnlock a texture, uploading the changes to video memory, …\nUpdate a rectangle within a planar NV12 or NV21 texture …\nUpdate the given texture rectangle with new pixel data.\nUpdate a rectangle within a planar YV12 or IYUV texture …\nVertex structure.\nChanges rarely, not lockable\nChanges frequently, lockable\nThe rendered content is stretched to the output resolution\nTexture can be used as a render target\nVertex color\nThe format of the texture, read-only\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height of the texture, read-only.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVertex position, in <code>SDL_Renderer</code> coordinates\nApplication reference count, used when freeing texture\nNormalized texture coordinates, if needed\nThe width of the texture, read-only.\nThis macro is a string describing the source at a …\nAC Back\nAC Bookmarks\nAC Close\nAC Exit\nAC Forward\nAC Home\nAC New\nAC Open\nAC Print\nAC Properties\nAC Refresh\nAC Save\nAC Search\nAC Stop\nAC Redo/Repeat\nErase-Eaze\nwindows contextual menu, compose\nLocated at the lower left of the return key on ISO …\nUsed for accepting phone calls.\nAC Cancel\nChannel Decrement\nChannel Increment\nAC Copy\nnot a key, just marks the number of scancodes for array …\nAC Cut\nUsed for rejecting phone calls.\nAC Find\nLocated in the top left corner (on both ANSI and ISO …\nAL Integrated Help Center\ninsert on PC, help on some Mac keyboards (but does send …\nused on Asian keyboards, see footnotes in USB doc\nYen\nalt, option\nHangul/English toggle\nHanja conversion\nKatakana\nHiragana\nZenkaku/Hankaku\nreserved\nreserved\nreserved\nreserved\nwindows, command (apple), meta\nEject\nFast Forward\nNext Track\nPause\nPlay\nPlay / Pause\nPrevious Track\nRecord\nRewind\nStop\nMenu (show menu)\nI’m not sure if this is really not covered by any of the …\nThis is the additional key that ISO keyboards have over …\nISO USB keyboards actually use this code instead of 49 for …\nnum lock on PC, clear on Mac keyboards\nAC Paste\nThe USB document says this is a status flag, not a …\nalt gr, option\n400-500 reserved for dynamic keycodes\nwindows, command (apple), meta\nAC Back\nAC Bookmarks\nAC Close\nAC Exit\nAC Forward\nAC Home\nAC New\nAC Open\nAC Print\nAC Properties\nAC Refresh\nAC Save\nAC Search\nAC Stop\nAC Redo/Repeat\nErase-Eaze\nwindows contextual menu, compose\nLocated at the lower left of the return key on ISO …\nUsed for accepting phone calls.\nAC Cancel\nChannel Decrement\nChannel Increment\nAC Copy\nnot a key, just marks the number of scancodes for array …\nAC Cut\nUsed for rejecting phone calls.\nAC Find\nLocated in the top left corner (on both ANSI and ISO …\nAL Integrated Help Center\ninsert on PC, help on some Mac keyboards (but does send …\nused on Asian keyboards, see footnotes in USB doc\nYen\nalt, option\nHangul/English toggle\nHanja conversion\nKatakana\nHiragana\nZenkaku/Hankaku\nreserved\nreserved\nreserved\nreserved\nwindows, command (apple), meta\nEject\nFast Forward\nNext Track\nPause\nPlay\nPlay / Pause\nPrevious Track\nRecord\nRewind\nStop\nMenu (show menu)\nI’m not sure if this is really not covered by any of the …\nThis is the additional key that ISO keyboards have over …\nISO USB keyboards actually use this code instead of 49 for …\nnum lock on PC, clear on Mac keyboards\nAC Paste\nThe USB document says this is a status flag, not a …\nalt gr, option\n400-500 reserved for dynamic keycodes\nwindows, command (apple), meta\nSleep\nUsually situated below the display on phones and used as a …\nUsually situated below the display on phones and used as a …\nAC Stop\nAC Undo\nWake\nThe SDL keyboard scancode representation.\nSleep\nUsually situated below the display on phones and used as a …\nUsually situated below the display on phones and used as a …\nAC Stop\nAC Undo\nWake\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAccelerometer\nAccelerometer for left Joy-Con controller and Wii nunchuk\nAccelerometer for right Joy-Con controller\nGyroscope\nGyroscope for left Joy-Con controller\nGyroscope for right Joy-Con controller\nReturned for an invalid sensor\nClose a sensor previously opened with <code>SDL_OpenSensor()</code>.\nGet the current state of an opened sensor.\nReturn the <code>SDL_Sensor</code> associated with an instance ID.\nGet the instance ID of a sensor.\nGet the implementation dependent name of a sensor.\nGet the implementation dependent name of a sensor.\nGet the platform dependent type of a sensor.\nGet the platform dependent type of a sensor.\nGet the properties associated with a sensor.\nGet the type of a sensor.\nGet the type of a sensor.\nGet a list of currently connected sensors.\nOpen a sensor for use.\nAccelerometer\nAccelerometer for left Joy-Con controller and Wii nunchuk\nAccelerometer for right Joy-Con controller\nGyroscope\nGyroscope for left Joy-Con controller\nGyroscope for right Joy-Con controller\nReturned for an invalid sensor\nUnknown sensor type\nA constant to represent standard gravity for accelerometer …\nThe opaque structure used to identify an opened SDL sensor.\nThis is a unique ID for a sensor for the time it is …\nThe different sensors defined by SDL.\nUpdate the current state of the open sensors.\nUnknown sensor type\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nNo value.\nA callback used with SDL sorting and binary search …\nA callback used with SDL sorting and binary search …\nCreate a set of environment variables\nDestroy a set of environment variables.\nA thread-safe set of environment variables\nDefine a four character code as a Uint32.\nA generic function pointer.\nGet the process environment.\nGet the value of a variable in the environment.\nGet all variables in the environment.\nGet the current set of SDL memory functions.\nGet the number of outstanding (unfreed) allocations.\nGet the original set of SDL memory functions.\nOutput buffer was too small.\nInvalid input sequence was encountered.\nIncomplete input sequence was encountered.\nGeneric error. Check <code>SDL_GetError()</code>?\nA macro to initialize an SDL interface.\nThe Unicode REPLACEMENT CHARACTER codepoint.\nDon’t let SDL use “long long” C types.\nThe value of Pi, as a double-precision floating point …\nThe value of Pi, as a single-precision floating point …\nA printf-formatting string for an <code>unsigned long long</code> value …\nA printf-formatting string prefix for a <code>long long</code> value.\nA printf-formatting string for a <code>long long</code> value.\nA printf-formatting string for a <code>unsigned long long</code> value.\nA printf-formatting string for an <code>unsigned long long</code> value …\nA printf-formatting string for a Uint32 value as …\nA printf-formatting string for a Uint64 value as …\nA printf-formatting string for an Sint32 value.\nA printf-formatting string for an Sint64 value.\nA printf-formatting string for a Uint32 value.\nA printf-formatting string for a Uint64 value.\nA printf-formatting string for a Uint32 value as …\nA printf-formatting string for a Uint64 value as …\nThe largest value that a <code>size_t</code> can hold for the target …\nSet the value of a variable in the environment.\nReplace SDL’s memory allocation functions with a custom …\nDecode a UTF-8 string in reverse, one Unicode codepoint at …\nDecode a UTF-8 string, one Unicode codepoint at a time.\nSDL times are signed, 64-bit integers representing …\nConvert a single Unicode codepoint to UTF-8.\nClear a variable from the environment.\nCompute the absolute value of <code>x</code>.\nCompute the arc cosine of <code>x</code>.\nCompute the arc cosine of <code>x</code>.\nAllocate memory aligned to a specific alignment.\nFree memory allocated by <code>SDL_aligned_alloc()</code>.\nCompute the arc sine of <code>x</code>.\nCompute the arc sine of <code>x</code>.\nThis works exactly like asprintf() but doesn’t require …\nCompute the arc tangent of <code>x</code>.\nCompute the arc tangent of <code>y / x</code>, using the signs of x and …\nCompute the arc tangent of <code>y / x</code>, using the signs of x and …\nCompute the arc tangent of <code>x</code>.\nParse a <code>double</code> from a string.\nParse an <code>int</code> from a string.\nPerform a binary search on a previously sorted array.\nPerform a binary search on a previously sorted array, …\nAllocate a zero-initialized array.\nA callback used to implement <code>SDL_calloc()</code>.\nCompute the ceiling of <code>x</code>.\nCompute the ceiling of <code>x</code>.\nA macro to copy memory between objects, with basic type …\nCopy the sign of one floating-point value to another.\nCopy the sign of one floating-point value to another.\nCompute the cosine of <code>x</code>.\nCompute the cosine of <code>x</code>.\nCalculate a CRC-16 value.\nCalculate a CRC-32 value.\nCompute the exponential of <code>x</code>.\nCompute the exponential of <code>x</code>.\nCompute the absolute value of <code>x</code>\nCompute the absolute value of <code>x</code>\nCompute the floor of <code>x</code>.\nCompute the floor of <code>x</code>.\nReturn the floating-point remainder of <code>x / y</code>\nReturn the floating-point remainder of <code>x / y</code>\nFree allocated memory.\nA callback used to implement <code>SDL_free()</code>.\nGet the value of a variable in the environment.\nGet the value of a variable in the environment.\nThis function converts text between encodings, reading …\nThis function frees a context used for character set …\nThis function allocates a context for the specified …\nHelper function to convert a string’s encoding in one …\nAn opaque handle representing string encoding conversion …\nConvert a UTF-8 string to the current locale’s character …\nConvert a UTF-8 string to UCS-2.\nConvert a UTF-8 string to UCS-4.\nConvert a wchar_t string to UTF-8.\nQuery if a character is alphabetic (a letter) or a number.\nQuery if a character is alphabetic (a letter).\nReport if a character is blank (a space or tab).\nReport if a character is a control character.\nReport if a character is a numeric digit.\nReport if a character is any “printable” except space.\nReturn whether the value is infinity.\nReturn whether the value is infinity.\nReport if a character is lower case.\nReturn whether the value is NaN.\nReturn whether the value is NaN.\nReport if a character is “printable”.\nReport if a character is a punctuation mark.\nReport if a character is whitespace.\nReport if a character is upper case.\nReport if a character is a hexadecimal digit.\nConvert an integer into a string.\nConvert a long long integer into a string.\nCompute the natural logarithm of <code>x</code>.\nCompute the base-10 logarithm of <code>x</code>.\nCompute the base-10 logarithm of <code>x</code>.\nCompute the natural logarithm of <code>x</code>.\nRound <code>x</code> to the nearest integer representable as a long\nRound <code>x</code> to the nearest integer representable as a long\nConvert a long integer into a string.\nAllocate uninitialized memory.\nA callback used to implement <code>SDL_malloc()</code>.\nCompare two buffers of memory.\nCopy non-overlapping memory.\nCopy memory ranges that might overlap.\nInitialize all bytes of buffer of memory to a specific …\nInitialize all 32-bit words of buffer of memory to a …\nSplit <code>x</code> into integer and fractional parts\nSplit <code>x</code> into integer and fractional parts\nCalculate a 32-bit MurmurHash3 value for a block of data.\nRaise <code>x</code> to the power <code>y</code>\nRaise <code>x</code> to the power <code>y</code>\nSort an array.\nSort an array, passing a userdata pointer to the compare …\nGenerate a pseudo-random number less than n for positive n\nGenerate 32 pseudo-random bits.\nGenerate 32 pseudo-random bits.\nGenerate a pseudo-random number less than n for positive n\nGenerate a uniform pseudo-random floating point number …\nGenerate a uniform pseudo-random floating point number …\nChange the size of allocated memory.\nA callback used to implement <code>SDL_realloc()</code>.\nRound <code>x</code> to the nearest integer.\nRound <code>x</code> to the nearest integer.\nScale <code>x</code> by an integer power of two.\nScale <code>x</code> by an integer power of two.\nSet the value of a variable in the environment.\nCompute the sine of <code>x</code>.\nCompute the sine of <code>x</code>.\nAdd two integers, checking for overflow.\nMultiply two integers, checking for overflow.\nThis works exactly like snprintf() but doesn’t require …\nCompute the square root of <code>x</code>.\nCompute the square root of <code>x</code>.\nSeeds the pseudo-random number generator.\nThis works exactly like sscanf() but doesn’t require …\nCompare two null-terminated UTF-8 strings, …\nSearch a UTF-8 string for the first instance of a specific …\nSearch a string for the first instance of a specific byte.\nCompare two null-terminated UTF-8 strings.\nAllocate a copy of a string.\nConcatenate strings.\nCopy a string.\nThis works exactly like strlen() but doesn’t require …\nConvert a string to lowercase.\nCompare two UTF-8 strings, case-insensitively, up to a …\nCompare two UTF-8 strings up to a number of bytes.\nAllocate a copy of a string, up to n characters.\nThis works exactly like strnlen() but doesn’t require …\nSearch a string, up to n bytes, for the first instance of …\nSearches a string for the first occurence of any character …\nSearch a string for the last instance of a specific byte.\nReverse a string’s contents.\nSearch a string for the first instance of a specific …\nParse a <code>double</code> from a string.\nThis works exactly like strtok_r() but doesn’t require …\nParse a <code>long</code> from a string.\nParse a <code>long long</code> from a string.\nParse an <code>unsigned long</code> from a string.\nParse an <code>unsigned long long</code> from a string.\nConvert a string to uppercase.\nThis works exactly like swprintf() but doesn’t require …\nCompute the tangent of <code>x</code>.\nCompute the tangent of <code>x</code>.\nConvert low-ASCII English letters to lowercase.\nConvert low-ASCII English letters to uppercase.\nTruncate <code>x</code> to an integer.\nTruncate <code>x</code> to an integer.\nConvert an unsigned integer into a string.\nConvert an unsigned long long integer into a string.\nConvert an unsigned long integer into a string.\nClear a variable from the environment.\nCopy an UTF-8 string.\nCount the number of codepoints in a UTF-8 string.\nCount the number of codepoints in a UTF-8 string, up to n …\nThis works exactly like vasprintf() but doesn’t require …\nThis works exactly like vsnprintf() but doesn’t require …\nThis works exactly like vsscanf() but doesn’t require …\nThis works exactly like vswprintf() but doesn’t require …\nCompare two null-terminated wide strings, …\nCompare two null-terminated wide strings.\nAllocate a copy of a wide string.\nConcatenate wide strings.\nCopy a wide string.\nThis works exactly like wcslen() but doesn’t require …\nCompare two wide strings, case-insensitively, up to a …\nCompare two wide strings up to a number of wchar_t values.\nThis works exactly like wcsnlen() but doesn’t require …\nSearch a wide string, up to n wide chars, for the first …\nSearch a wide string for the first instance of a specific …\nParse a <code>long</code> from a wide string.\nClear an object’s memory to zero, using a pointer.\nA signed 16-bit integer type.\nA signed 32-bit integer type.\nA signed 64-bit integer type.\nA signed 8-bit integer type.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nAn unsigned 16-bit integer type.\nAn unsigned 32-bit integer type.\nAn unsigned 64-bit integer type.\nAn unsigned 8-bit integer type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCloses and frees a storage container.\nCopy a file in a writable storage container.\nCreate a directory in a writable storage container.\nEnumerate a directory in a storage container through a …\nQuery the size of a file within a storage container.\nGet information about a filesystem path in a storage …\nQueries the remaining space in a storage container.\nEnumerate a directory tree, filtered by pattern, and …\nOpens up a container for local filesystem storage.\nOpens up a container using a client-provided storage …\nOpens up a read-only container for the application’s …\nOpens up a container for a user’s unique read/write …\nSynchronously read a file from a storage container into a …\nRemove a file or an empty directory in a writable storage …\nRename a file or directory in a writable storage container.\nAn abstract interface for filesystem access.\nFunction interface for <code>SDL_Storage</code>.\nChecks if the storage container is ready to use.\nSynchronously write a file from client memory into a …\nCreate a new <code>SDL_StorageInterface</code> initialized with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>SDL_StorageInterface</code> initialized with …\nflip horizontally\nlinear filtering\nnearest pixel sampling\nDo not flip\nAdd an alternate version of a surface.\nPerforms a fast blit from the source surface to the …\nPerform a scaled blit using the 9-grid algorithm to a …\nPerform a scaled blit to a destination surface, which may …\nPerform a tiled blit to a destination surface, which may …\nPerform a scaled and tiled blit to a destination surface, …\nPerform low-level surface blitting only.\nPerform low-level surface scaled blitting only.\nClear a surface with a specific color, with floating point …\nCopy a block of pixels of one format to another format.\nCopy a block of pixels of one format and colorspace to …\nCopy an existing surface to a new surface of the specified …\nCopy an existing surface to a new surface of the specified …\nAllocate a new surface with a specific pixel format.\nAllocate a new surface with a specific pixel format and …\nCreate a palette and associate it with a surface.\nFree a surface.\nCreates a new surface identical to the existing surface.\nflip horizontally\nDo not flip\nflip vertically\nPerform a fast fill of a rectangle with a specific color.\nPerform a fast fill of a set of rectangles with a specific …\nThe flip mode.\nFlip a surface vertically or horizontally.\nGet the additional alpha value used in blit operations.\nGet the blend mode used for blit operations.\nGet the clipping rectangle for a surface.\nGet the color key (transparent pixel) for a surface.\nGet the additional color value multiplied into blit …\nGet the colorspace used by a surface.\nGet an array including all versions of a surface.\nGet the palette used by a surface.\nGet the properties associated with a surface.\nLoad a BMP image from a file.\nLoad a BMP image from a seekable SDL data stream.\nSet up a surface for directly accessing the pixels.\nEvaluates to true if the surface needs to be locked before …\nMap an RGB triple to an opaque pixel value for a surface.\nMap an RGBA quadruple to a pixel value for a surface.\nPremultiply the alpha on a block of pixels.\nPremultiply the alpha in a surface.\nRetrieves a single pixel from a surface.\nRetrieves a single pixel from a surface.\nRemove all alternate versions of a surface.\nlinear filtering\nnearest pixel sampling\nSurface is currently locked\nSurface needs to be locked to access pixels\nSurface uses preallocated pixel memory\nSurface uses pixel memory allocated with …\nSave a surface to a file.\nSave a surface to a seekable SDL data stream in BMP format.\nThe scaling mode.\nCreates a new surface identical to the existing surface, …\nSet an additional alpha value used in blit operations.\nSet the blend mode used for blit operations.\nSet the clipping rectangle for a surface.\nSet the color key (transparent pixel) in a surface.\nSet an additional color value multiplied into blit …\nSet the colorspace used by a surface.\nSet the palette used by a surface.\nSet the RLE acceleration hint for a surface.\nPerform a stretched pixel copy from one surface to another.\nA collection of pixels used in software blitting.\nThe flags on an <code>SDL_Surface</code>.\nReturn whether a surface has alternate versions available.\nReturns whether the surface has a color key.\nReturns whether the surface is RLE enabled.\nRelease a surface after directly accessing the pixels.\nWrites a single pixel to a surface.\nWrites a single pixel to a surface.\nflip vertically\nThe flags of the surface, read-only\nThe format of the surface, read-only\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe height of the surface, read-only.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe distance in bytes between rows of pixels, read-only\nA pointer to the pixels of the surface, the pixels are …\nApplication reference count, used when freeing surface\nReserved for internal use\nThe width of the surface, read-only.\n(<code>sdl3-sys</code>) Enable a <code>use-windows-sys-*</code> feature to alias …\nNo value.\nNo value.\nNo value.\nNo value.\nSee the official Android developer guide for more …\nSee the official Android developer guide for more …\nRetrieve the Java instance of the Android activity class.\nGet the path used for caching data for this Android …\nGet the path used for external storage for this Android …\nGet the current state of external storage for this Android …\nGet the path used for internal storage for this Android …\nGet the Android Java Native Interface Environment of the …\nQuery Android API level of the current device.\nGet the DXGI Adapter and Output indices for the specified …\nGet the D3D9 adapter index that matches the specified …\nGets a reference to the default user handle for GDK.\nGets a reference to the global async task queue handle for …\nGet the application sandbox environment, if any.\nQuery if the application is running on a Chromebook.\nQuery if the application is running on a Samsung DeX …\nQuery if the current device is a TV.\nQuery if the current device is a tablet.\nLet iOS apps with external event handling report …\nLet iOS apps with external event handling report …\nLet iOS apps with external event handling report …\nLet iOS apps with external event handling report …\nLet iOS apps with external event handling report …\nLet iOS apps with external event handling report …\nLet iOS apps with external event handling report …\nRequest permissions at runtime, asynchronously.\nCallback that presents a response from a …\nApplication sandbox environment.\nTrigger the Android system back button behavior.\nSend a user command to SDLActivity.\nSets the UNIX nice value for a thread.\nSets the priority (not nice level) and scheduling policy …\nSet a callback for every Windows message, run before …\nSet a callback for every X11 event.\nUse this function to set the animation callback on Apple …\nUse this function to enable or disable the SDL event pump …\nShows an Android toast notification.\nA callback to be used with <code>SDL_SetWindowsMessageHook</code>.\nA callback to be used with <code>SDL_SetX11EventHook</code>.\nThe prototype for an Apple iOS animation callback.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\n(<code>sdl3-sys</code>) Enable either a <code>use-x11-*</code> or a <code>use-x11-dl-*</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe thread is currently running\nThe thread has finished and should be cleaned up with …\nThe thread is detached and can’t be waited on\nNo value.\nNo value.\nCleanup all TLS data for this thread.\nCreate a new thread with a default stack size.\nCreate a new thread with with the specified properties.\nLet a thread clean up on exit without intervention.\nGet the thread identifier for the current thread.\nGet the current thread’s value associated with a thread …\nGet the thread identifier for the specified thread.\nGet the thread name as it was specified in …\nGet the current state of a thread.\nSet the priority for the current thread.\nSet the current thread’s value associated with a thread …\nThe thread is currently running\nThe thread has finished and should be cleaned up with …\nThe thread is detached and can’t be waited on\nThe thread is not valid\nThe callback used to cleanup data passed to <code>SDL_SetTLS</code>.\nThread local storage ID.\nThe SDL thread object.\nThe function passed to <code>SDL_CreateThread()</code> as the new thread…\nA unique numeric ID that identifies a thread.\nThe SDL thread priority.\nThe SDL thread state.\nWait for a thread to finish.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nThe thread is not valid\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDay/Month/Year\nMonth/Day/Year\nDay/Month/Year\nMonth/Day/Year\nYear/Month/Day\nThe preferred date format of the current system locale.\nA structure holding a calendar date and time broken down …\nConverts a calendar time to an <code>SDL_Time</code> in nanoseconds …\nGets the current value of the system realtime clock in …\nGets the current preferred date and time format for the …\nGet the day of week for a calendar date.\nGet the day of year for a calendar date.\nGet the number of days in a month for a given year.\n12 hour time\n24 hour time\nThe preferred time format of the current system locale.\nConverts a Windows FILETIME (100-nanosecond intervals …\nConverts an <code>SDL_Time</code> in nanoseconds since the epoch to a …\nConverts an SDL time into a Windows FILETIME …\nYear/Month/Day\n12 hour time\n24 hour time\nDay of the month [01-31]\nDay of the week [0-6] (0 being Sunday)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHour [0-23]\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMinute [0-59]\nMonth [01-12]\nNanoseconds [0-999999999]\nSeconds [0-60]\nSeconds east of UTC\nYear\nNo value.\nNo value.\nCall a callback function at a future time.\nCall a callback function at a future time.\nWait a specified number of milliseconds before returning.\nWait a specified number of nanoseconds before returning.\nWait a specified number of nanoseconds before returning.\nGet the current value of the high resolution counter.\nGet the count per second of the high resolution counter.\nGet the number of milliseconds since SDL library …\nGet the number of nanoseconds since SDL library …\nNumber of milliseconds in a second.\nConvert milliseconds to nanoseconds.\nFunction prototype for the nanosecond timer callback …\nNumber of nanoseconds in a millisecond.\nNumber of nanoseconds in a second.\nNumber of nanoseconds in a microsecond.\nConvert nanoseconds to milliseconds.\nConvert nanoseconds to seconds.\nConvert nanoseconds to microseconds.\nRemove a timer created with <code>SDL_AddTimer()</code>.\nConvert seconds to nanoseconds.\nFunction prototype for the millisecond timer callback …\nDefinition of the timer ID type.\nNumber of microseconds in a second.\nConvert microseconds to nanoseconds.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\ntouch screen with window-relative coordinates\ntrackpad with absolute device coordinates\ntrackpad with screen cursor-relative coordinates\nData about a single finger in a multitouch event.\nA unique ID for a single finger on a touch device.\nGet the touch device name as reported from the driver.\nGet the type of the given touch device.\nGet a list of registered touch devices.\nGet a list of active fingers for a given touch device.\nThe <code>SDL_TouchID</code> for touch events simulated with mouse …\ntouch screen with window-relative coordinates\ntrackpad with absolute device coordinates\ntrackpad with screen cursor-relative coordinates\nThe <code>SDL_MouseID</code> for mouse events simulated with touch …\nAn enum that describes the type of a touch device.\nA unique ID for a touch device.\nReturns the argument unchanged.\nReturns the argument unchanged.\nthe finger ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nthe quantity of pressure applied, normalized (0…1)\nthe x-axis location of the touch event, normalized (0…1)\nthe y-axis location of the touch event, normalized (0…1)\nNo value.\nSimulate a click on a tray entry.\nCreate an icon to be placed in the operating system’s …\nCreate a menu for a system tray.\nCreate a submenu for a system tray entry.\nDestroys a tray object.\nReturns a list of entries in the menu, in order.\nGets whether or not an entry is checked.\nGets whether or not an entry is enabled.\nGets the label of an entry.\nGets the menu containing a certain tray entry.\nGets a previously created tray menu.\nGets the entry for which the menu is a submenu, if the …\nGets the tray for which this menu is the first-level menu, …\nGets a previously created tray entry submenu.\nInsert a tray entry at a given position.\nRemoves a tray entry.\nSets a callback to be invoked when the entry is selected.\nSets whether or not an entry is checked.\nSets whether or not an entry is enabled.\nSets the label of an entry.\nUpdates the system tray icon’s icon.\nUpdates the system tray icon’s tooltip.\nMake the entry a simple button. Required.\nMake the entry a checkbox. Required.\nMake the entry checked. This is valid only for checkboxes. …\nMake the entry disabled. Optional.\nPrepare the entry to have a submenu. Required\nAn opaque handle representing a toplevel system tray …\nA callback that is invoked when a tray entry is selected.\nAn opaque handle representing an entry on a system tray …\nFlags that control the creation of system tray entries.\nAn opaque handle representing a menu/submenu on a system …\nUpdate the trays.\nSome value of type <code>T</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the code revision of SDL that is linked against your …\nGet the version of SDL that is linked against your program.\nThe current major version of SDL headers.\nThe current micro (or patchlevel) version of the SDL …\nThe current minor version of the SDL headers.\nThis is the version number macro for the current SDL …\nThis macro turns the version numbers into a numeric value.\nThis macro extracts the major version from a version number\nThis macro extracts the micro version from a version number\nThis macro extracts the minor version from a version number\nThis macro will evaluate to true if compiled with SDL at …\nset to 1 to require hardware acceleration, set to 0 to …\nthe minimum number of bits for the alpha channel of the …\nthe minimum number of bits for the blue channel of the …\nthe minimum number of bits for the green channel of the …\nthe minimum number of bits for the red channel of the …\nthe minimum number of bits for the alpha channel of the …\nthe minimum number of bits for the blue channel of the …\nFlash the window briefly to get attention\nthe minimum number of bits for frame buffer size; defaults …\nCancel any window flash state\nsome combination of 0 or more of elements of the …\nOpenGL context major version.\nOpenGL context minor version.\ntype of GL context (Core, Compatibility, ES). See …\nsets context the release behavior. See …\nset context reset notification. See …\nDark colored system theme\nthe minimum number of bits in the depth buffer; defaults …\nwhether the output is single or double buffered; defaults …\nRegion can drag entire window.\nrequests sRGB capable visual; defaults to 0.\nthe minimum number of bits for the green channel of the …\nThe display is in landscape mode, with the right side up, …\nThe display is in landscape mode, with the left side up, …\nLight colored system theme\nthe number of buffers used for multisample anti-aliasing; …\nthe number of samples used around the current pixel used …\nRegion is normal. No special properties.\nNo value.\nNo value.\nNo value.\nThe display is in portrait mode\nThe display is in portrait mode, upside down\nthe minimum number of bits for the red channel of the …\nRegion is the resizable bottom border.\nRegion is the resizable bottom-left corner border.\nRegion is the resizable bottom-right corner border.\nRegion is the resizable left border.\nRegion is the resizable right border.\nRegion is the resizable top border.\nRegion is the resizable top-left corner border.\nRegion is the resizable top-right corner border.\nnot used (deprecated).\nCreate a child popup window of the specified parent window.\nCreate a window with the specified dimensions and flags.\nCreate a window with the specified properties.\nDestroy a window.\nDestroy the surface associated with the window.\nPrevent the screen from being blanked by a screen saver.\nThis is a unique ID for a display for the time it is …\nThe structure that defines a display mode.\nInternal display mode data.\nDisplay orientation values; the way a display is rotated.\nAn EGL attribute, used when creating an EGL context.\nEGL platform attribute initialization callback.\nOpaque type for an EGL config.\nOpaque type for an EGL display.\nEGL surface/context attribute initialization callback …\nOpaque type for an EGL surface.\nGet the currently active EGL config.\nGet the currently active EGL display.\nGet an EGL library function by name.\nGet the EGL surface associated with the window.\nSets the callbacks for defining custom EGLAttrib arrays …\nAn EGL integer attribute, used when creating an EGL …\nAllow the screen to be blanked by a screen saver.\nFlash the window briefly to get attention\nCancel any window flash state\nFlash the window until it gets focus\nWindow flash operation.\nRequest a window to demand attention from the user.\nAn enumeration of OpenGL configuration attributes.\nAn opaque handle to an OpenGL context.\nPossible flags to be set for the <code>SDL_GL_CONTEXT_FLAGS</code> …\nPossible values to be set for the …\nPossible values to be set <code>SDL_GL_CONTEXT_RESET_NOTIFICATION</code>…\nPossible values to be set for the …\nset to 1 to require hardware acceleration, set to 0 to …\nthe minimum number of bits for the alpha channel of the …\nthe minimum number of bits for the blue channel of the …\nthe minimum number of bits for the green channel of the …\nthe minimum number of bits for the red channel of the …\nthe minimum number of bits for the alpha channel of the …\nthe minimum number of bits for the blue channel of the …\nthe minimum number of bits for frame buffer size; defaults …\nsome combination of 0 or more of elements of the …\nOpenGL context major version.\nOpenGL context minor version.\nOpenGL Compatibility Profile context\nOpenGL Core Profile context\nGLX_CONTEXT_ES2_PROFILE_BIT_EXT\ntype of GL context (Core, Compatibility, ES). See …\nsets context the release behavior. See …\nset context reset notification. See …\nCreate an OpenGL context for an OpenGL window, and make it …\nthe minimum number of bits in the depth buffer; defaults …\nwhether the output is single or double buffered; defaults …\nDelete an OpenGL context.\nCheck if an OpenGL extension is supported for the current …\nrequests sRGB capable visual; defaults to 0.\nthe minimum number of bits for the green channel of the …\nGet the actual value for an attribute from the current …\nGet the currently active OpenGL context.\nGet the currently active OpenGL window.\nGet an OpenGL function by name.\nGet the swap interval for the current OpenGL context.\nDynamically load an OpenGL library.\nthe number of buffers used for multisample anti-aliasing; …\nthe number of samples used around the current pixel used …\nSet up an OpenGL context for rendering into an OpenGL …\nthe minimum number of bits for the red channel of the …\nnot used (deprecated).\nReset all previously set OpenGL context attributes to …\nOpenGL context sharing; defaults to 0.\nthe minimum number of bits in the stencil buffer; defaults …\nwhether the output is stereo 3D; defaults to off.\nSet an OpenGL window attribute before window creation.\nSet the swap interval for the current OpenGL context.\nUpdate a window with OpenGL rendering.\nUnload the OpenGL library previously loaded by …\nGet the closest match to the requested display mode.\nGet information about the current display mode.\nGet the orientation of a display.\nGet the name of the currently initialized video driver.\nGet information about the desktop’s display mode.\nGet the desktop area represented by a display.\nGet the content scale of a display.\nGet the display containing a point.\nGet the display primarily containing a rect.\nGet the display associated with a window.\nGet the name of a display in UTF-8 encoding.\nGet the properties associated with a display.\nGet the usable desktop area represented by a display, in …\nGet a list of currently connected displays.\nGet a list of fullscreen display modes available on a …\nGet the window that currently has an input grab enabled.\nGet the orientation of a display when it is unrotated.\nGet the number of video drivers compiled into SDL.\nReturn the primary display.\nGet the current system theme.\nGet the name of a built in video driver.\nGet the size of a window’s client area.\nGet the size of a window’s borders (decorations) around …\nGet the content display scale relative to a window’s …\nGet the window flags.\nGet a window from a stored ID.\nQuery the display mode to use when a window is visible at …\nGet the raw ICC profile data for the screen the window is …\nGet the numeric ID of a window.\nGet a window’s keyboard grab mode.\nGet the maximum size of a window’s client area.\nGet the minimum size of a window’s client area.\nGet a window’s mouse grab mode.\nGet the mouse confinement rectangle of a window.\nGet the opacity of a window.\nGet parent of a window.\nGet the pixel density of a window.\nGet the pixel format associated with the window.\nGet the position of a window.\nGet the properties associated with a window.\nGet the safe area for this window.\nGet the size of a window’s client area.\nGet the size of a window’s client area, in pixels.\nGet the SDL surface associated with the window.\nGet VSync for the window surface.\nGet the title of a window.\nGet a list of valid windows.\nRegion can drag entire window.\nRegion is normal. No special properties.\nRegion is the resizable bottom border.\nRegion is the resizable bottom-left corner border.\nRegion is the resizable bottom-right corner border.\nRegion is the resizable left border.\nRegion is the resizable right border.\nRegion is the resizable top border.\nRegion is the resizable top-left corner border.\nRegion is the resizable top-right corner border.\nHide a window.\nCallback used for hit-testing.\nPossible return values from the <code>SDL_HitTest</code> callback.\nRequest that the window be made as large as possible.\nRequest that the window be minimized to an iconic …\nThe display is in landscape mode, with the right side up, …\nThe display is in landscape mode, with the left side up, …\nThe display is in portrait mode\nThe display is in portrait mode, upside down\nThe display orientation can’t be determined\nThe pointer to the global <code>wl_display</code> object used by the …\nRequest that a window be raised above other windows and …\nRequest that the size and position of a minimized or …\nDark colored system theme\nLight colored system theme\nUnknown system theme\nCheck whether the screensaver is currently enabled.\nSet the window to always be above the others.\nRequest that the aspect ratio of a window’s client area …\nSet the border state of a window.\nSet whether the window may have input focus.\nRequest that the window’s fullscreen state be changed.\nSet the display mode to use when a window is visible and …\nProvide a callback that decides if a window region has …\nSet the icon for a window.\nSet a window’s keyboard grab mode.\nSet the maximum size of a window’s client area.\nSet the minimum size of a window’s client area.\nToggle the state of the window as modal.\nSet a window’s mouse grab mode.\nConfines the cursor to the specified area of a window.\nSet the opacity for a window.\nSet the window as a child of a parent window.\nRequest that the window’s position be set.\nSet the user-resizable state of a window.\nSet the shape of a transparent window.\nRequest that the size of a window’s client area be set.\nToggle VSync for the window surface.\nSet the title of a window.\nShow a window.\nDisplay the system-level window menu.\nBlock until any pending window state is finalized.\nSystem theme.\nCopy the window surface to the screen.\nCopy areas of the window surface to the screen.\nUsed to indicate that the window position should be …\nUsed to indicate that the window position should be …\nA magic value used with <code>SDL_WINDOWPOS_CENTERED</code>.\nA macro to test if the window position is marked as “…\nA macro to test if the window position is marked as “…\nUsed to indicate that you don’t care what the window …\nUsed to indicate that you don’t care what the window …\nA magic value used with <code>SDL_WINDOWPOS_UNDEFINED</code>.\nwindow should always be above others\nno window decoration\nwindow not created by SDL\nwindow is in fullscreen mode\nwindow is neither mapped onto the desktop nor shown in the …\nwindow uses high pixel density back buffer if possible\nwindow has input focus\nwindow has grabbed keyboard input\nwindow is maximized\nwindow usable for Metal view\nwindow is minimized\nwindow is modal\nwindow has mouse captured (unrelated to MOUSE_GRABBED)\nwindow has mouse focus\nwindow has grabbed mouse input\nwindow has relative mode enabled\nwindow should not be focusable\nwindow is occluded\nwindow usable with OpenGL context\nwindow should be treated as a popup menu, requires a …\nwindow can be resized\nwindow should be treated as a tooltip and does not get …\nwindow with transparent buffer\nwindow should be treated as a utility window, not showing …\nwindow usable for Vulkan surface\nThe struct used as an opaque handle to a window.\nThe flags on a window.\nReturn whether the window has a surface associated with it.\nThis is a unique ID for a window.\nOpenGL context sharing; defaults to 0.\nthe minimum number of bits in the stencil buffer; defaults …\nwhether the output is stereo 3D; defaults to off.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nUnknown system theme\nThe display orientation can’t be determined\nFlash the window until it gets focus\nthe display this mode is associated with\npixel format\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nheight\nPrivate\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nscale converting size to pixels (e.g. a 1920x1080 mode …\nrefresh rate (or 0.0f for unspecified)\nprecise refresh rate denominator\nprecise refresh rate numerator (or 0 for unspecified)\nwidth\nCreate a Vulkan rendering surface for a window.\nDestroy the Vulkan rendering surface of a window.\nGet the Vulkan instance extensions needed for …\nQuery support for presentation via a given physical device …\nGet the address of the <code>vkGetInstanceProcAddr</code> function.\nDynamically load the Vulkan loader library.\nUnload the Vulkan library previously loaded by …\n(<code>sdl3-sys</code>) Enable a <code>use-ash-*</code> feature to alias this to …\n(<code>sdl3-sys</code>) Enable a <code>use-ash-*</code> feature to alias this to …\n(<code>sdl3-sys</code>) Enable a <code>use-ash-*</code> feature to alias this to …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")